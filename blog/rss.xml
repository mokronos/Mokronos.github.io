<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mokronos's Site Blog</title>
        <link>https://mokronos.github.io/blog</link>
        <description>Mokronos's Site Blog</description>
        <lastBuildDate>Mon, 30 Oct 2023 13:16:27 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Artificial Intelligence]]></title>
            <link>https://mokronos.github.io/blog/ai</link>
            <guid>https://mokronos.github.io/blog/ai</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[General]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="general">General<a href="#general" class="hash-link" aria-label="Direct link to General" title="Direct link to General">​</a></h2><p><a href="http://www.incompleteideas.net/IncIdeas/BitterLesson.html" target="_blank" rel="noopener noreferrer">General methods</a> are almost always better than imposing human knowledge on the system (e.g. Alpha Go Zero, Image Processing with edges vs deep learning).
The only case where human knowledge might help a bit is when you have a product that is not working without a lot of data and that data is only obtainable during operation, for example self driving cars.
Then, it might be helpful to develop a lower capability system with the help of human knowledge to have a sellable system and get the data to train the system from scratch without human knowledge (e.g. Tesla FSD)</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bayesian thinking]]></title>
            <link>https://mokronos.github.io/blog/bayesian_thinking</link>
            <guid>https://mokronos.github.io/blog/bayesian_thinking</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[classes]]></title>
            <link>https://mokronos.github.io/blog/classes</link>
            <guid>https://mokronos.github.io/blog/classes</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[erledigt:]]></description>
            <content:encoded><![CDATA[<p>erledigt:
25: alle kernmodule hab ich (dig übertragung und dig signalverarbeitung noch nicht bestanden, hochfrequenztechnik noch aus bachelor)</p><p>25: conv opt, antennen, kanalcodierung, mobile communications, global nav</p><p>2.5: wahl aus angebot von fau (einführung in ML)</p><p>2.5: hauptseminar aus studienrichtung gemacht (audio processing)</p><p>laufend:
2.5 laborpraktikum aus studienrichtung (signal processing ML)</p><p>fehlen:
Vorlesungen:
5 vertiefung (hochfrequenztechnik?)
12.5 wahl aus fau</p><p>Praktika und seminare:
hauptseminar aus fau
2.5 laborpraktikum aus angebot von techfak
2.5 hauptseminar aus angebot von fau
10 forschungspraktikum</p><p>30 fehlen an masterarbeit</p><hr><p>total:
erledigt:
55
laufend:
2.5
brauch noch:
17.5 (vorlesungen)
15 (praktika/sem)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="30-masterarbeit">30 (masterarbeit)<a href="#30-masterarbeit" class="hash-link" aria-label="Direct link to 30 (masterarbeit)" title="Direct link to 30 (masterarbeit)">​</a></h2><p>120</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Coding]]></title>
            <link>https://mokronos.github.io/blog/coding</link>
            <guid>https://mokronos.github.io/blog/coding</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Gitignore]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gitignore">Gitignore<a href="#gitignore" class="hash-link" aria-label="Direct link to Gitignore" title="Direct link to Gitignore">​</a></h2><p>Just select a gitignore template when creating a repository on github. Overview can be found <a href="https://github.com/github/gitignore" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="python-random-seed">Python random seed<a href="#python-random-seed" class="hash-link" aria-label="Direct link to Python random seed" title="Direct link to Python random seed">​</a></h2><p>Need to set the seed in the file of the execution of the function. If the function is imported from another file, the seed will not be set for the imported function. Same for PyTorch.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vim-tips">Vim tips<a href="#vim-tips" class="hash-link" aria-label="Direct link to Vim tips" title="Direct link to Vim tips">​</a></h2><ul><li>gf to open file under cursor (markdown internal links)</li><li>gx to open file under cursor with default program (images, urls)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="local-server">Local server<a href="#local-server" class="hash-link" aria-label="Direct link to Local server" title="Direct link to Local server">​</a></h2><p>If you get slow load times on every other request only in chrome, use 127.0.0.1 instead of localhost.
I think it has something to do with chrome trying to resolve localhost to ipv6 first.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cool-python-libraries">Cool python libraries<a href="#cool-python-libraries" class="hash-link" aria-label="Direct link to Cool python libraries" title="Direct link to Cool python libraries">​</a></h2><ul><li><a href="https://github.com/gruns/icecream" target="_blank" rel="noopener noreferrer">icecream</a> for nicer printing/logging</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CS50]]></title>
            <link>https://mokronos.github.io/blog/cs50</link>
            <guid>https://mokronos.github.io/blog/cs50</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Lecture 0]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-0"><a href="https://cs50.harvard.edu/college/2022/spring/notes/0/" target="_blank" rel="noopener noreferrer">Lecture 0</a><a href="#lecture-0" class="hash-link" aria-label="Direct link to lecture-0" title="Direct link to lecture-0">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-1"><a href="https://cs50.harvard.edu/college/2022/spring/notes/1/" target="_blank" rel="noopener noreferrer">Lecture 1</a><a href="#lecture-1" class="hash-link" aria-label="Direct link to lecture-1" title="Direct link to lecture-1">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compiling">Compiling<a href="#compiling" class="hash-link" aria-label="Direct link to Compiling" title="Direct link to Compiling">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">make &lt;program_name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With file ending.</p><p>Make can be used to compile most files. Then one can execute them without file ending.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">./&lt;program_name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="basic-c-syntax">Basic C syntax<a href="#basic-c-syntax" class="hash-link" aria-label="Direct link to Basic C syntax" title="Direct link to Basic C syntax">​</a></h3><p>No need to go over this.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-2"><a href="https://cs50.harvard.edu/college/2022/spring/notes/2/" target="_blank" rel="noopener noreferrer">Lecture 2</a><a href="#lecture-2" class="hash-link" aria-label="Direct link to lecture-2" title="Direct link to lecture-2">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-more-compiling">Some more compiling<a href="#some-more-compiling" class="hash-link" aria-label="Direct link to Some more compiling" title="Direct link to Some more compiling">​</a></h3><p>Make is essentially calling the language specific compilers. For C clang is called. With clang includes need to be manually added as an argument. Make does this automatically.</p><p>Compiling is generally done in multiple steps:</p><ol><li>Preprocessing:<ul><li>adding in includes and macros</li><li>removing comments</li></ul></li><li>Compiling<ul><li>converts code to assembly</li></ul></li><li>Assembling<ul><li>converts assembly to binary, which is machine code and can be run on a CPU.</li></ul></li><li>Linking<ul><li>puts compiled includes in the binary code. No need to compile includes multiple times.</li></ul></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="debugging">Debugging<a href="#debugging" class="hash-link" aria-label="Direct link to Debugging" title="Direct link to Debugging">​</a></h3><p>Bugs are errors in a program, so that it performs differently than expected. Finding and fixing these errors is called Debugging.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-3"><a href="https://cs50.harvard.edu/college/2022/spring/notes/3/" target="_blank" rel="noopener noreferrer">Lecture 3</a><a href="#lecture-3" class="hash-link" aria-label="Direct link to lecture-3" title="Direct link to lecture-3">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="search">Search<a href="#search" class="hash-link" aria-label="Direct link to Search" title="Direct link to Search">​</a></h3><p>Arrays are just lists of entries. Computers can only look at one entry at a time, so search algorithms are needed to look up specific entries.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="big-o">Big <em>O</em><a href="#big-o" class="hash-link" aria-label="Direct link to big-o" title="Direct link to big-o">​</a></h3><p>Most search algorithms try to achieve the same thing. The main difference is the running time. This is not exactly in seconds but as the complexity of the algorithm.</p><p>To do that one uses the big <em>O</em> notation, which describes how much time the algorithm takes approximately dependent on the size of the problem. The most common running times are:</p><ul><li>\<!-- -->(O(n^2)<!-- -->\<!-- -->)</li><li>\<!-- -->(O(n \log n)<!-- -->\<!-- -->)</li><li>\<!-- -->(O(n)<!-- -->\<!-- -->)</li><li>\<!-- -->(O(\log n)<!-- -->\<!-- -->)</li><li>\<!-- -->(O(1)<!-- -->\<!-- -->)</li></ul><p>The <!-- -->\<!-- -->(O<!-- -->\<!-- -->) describes the upper bound of time steps an algorithm takes. The lower bound is described by <!-- -->\<!-- -->(\Omega<!-- -->\<!-- -->), and if the two are the same one uses <!-- -->\<!-- -->(\Theta<!-- -->\<!-- -->).</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="different-search-algorithms">Different search algorithms<a href="#different-search-algorithms" class="hash-link" aria-label="Direct link to Different search algorithms" title="Direct link to Different search algorithms">​</a></h3><p><a href="/blog/search">Here.</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="different-sorting-algorithms">Different sorting algorithms<a href="#different-sorting-algorithms" class="hash-link" aria-label="Direct link to Different sorting algorithms" title="Direct link to Different sorting algorithms">​</a></h3><p><a href="/blog/sort">Some Sort Algorithms.</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="recursion">Recursion<a href="#recursion" class="hash-link" aria-label="Direct link to Recursion" title="Direct link to Recursion">​</a></h3><p>Recursion can be helpful to express logic, for example binary search. One needs to be careful when defining the breaking condition, so not too much memory is used by going too deep.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-4"><a href="https://cs50.harvard.edu/college/2022/spring/notes/4/" target="_blank" rel="noopener noreferrer">Lecture 4</a><a href="#lecture-4" class="hash-link" aria-label="Direct link to lecture-4" title="Direct link to lecture-4">​</a></h2><p>Pointers are variables which store memory addresses where the values of other variables might be stored. It's important to know the difference, so not to copy the address and think one copied the value of the variable.<br>
<!-- -->The Syntax for arrays just uses the address of the first element and adds the indices of the successive elements to that address. Same is happening with strings. Strings are just one pointer to the first character. The computer looks at the successive addresses and stops at the element <code>\0</code>.<br>
<!-- -->It's important to know that when accessing uninitialized memory one can see values that have been saved by previous programs at that address. This can be dangerous, if there are passwords saved for example.<br>
<!-- -->One can check memory errors with valgrind on the command line.<br>
<!-- -->All this is important if one wants to make the program as efficient as possible and debug deep down. But for high level languages like python this is not as important as python mostly handles this for you, with less efficiency.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-5"><a href="https://cs50.harvard.edu/college/2022/spring/notes/5/" target="_blank" rel="noopener noreferrer">Lecture 5</a><a href="#lecture-5" class="hash-link" aria-label="Direct link to lecture-5" title="Direct link to lecture-5">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="linked-lists">Linked lists<a href="#linked-lists" class="hash-link" aria-label="Direct link to Linked lists" title="Direct link to Linked lists">​</a></h3><p>Linked lists are list where the elements are not stored behind each other in memory but at separate places. After the first value one needs to store a pointer to the next value, and so on.<br>
<!-- -->If one wants to add a element to a normal array and the memory slot after the originally last element is already full, we have an issue. We can either copy the array to a new location in memory with enough space, which requires some runtime, or we use a linked list where adding a new element is trivial, as the element after the last element is always reserved for a pointer to a potential new element.<br>
<!-- -->So if we have a constant length list, use a normal array, as the linked list would require more memory. If we might change the length of the list, use a linked list, as the overhead is less than the potential cost of copying a normal array.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trees">Trees<a href="#trees" class="hash-link" aria-label="Direct link to Trees" title="Direct link to Trees">​</a></h3><p>Trees are just defined by nodes. A node is a data structure which has one value and can have multiple pointers to child nodes.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-data-structures">Other data structures<a href="#other-data-structures" class="hash-link" aria-label="Direct link to Other data structures" title="Direct link to Other data structures">​</a></h3><p>There are several other data structures like queues (first-in-first-out), stacks (last-in-first-out) and dictionaries.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-6"><a href="https://cs50.harvard.edu/college/2022/spring/notes/6/" target="_blank" rel="noopener noreferrer">Lecture 6</a><a href="#lecture-6" class="hash-link" aria-label="Direct link to lecture-6" title="Direct link to lecture-6">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="learning-a-new-programming-language">Learning a new programming language<a href="#learning-a-new-programming-language" class="hash-link" aria-label="Direct link to Learning a new programming language" title="Direct link to Learning a new programming language">​</a></h3><p>Most programming languages are pretty similar. All of them have conditions, operators, data structures and other things. Differences are often just syntax or bigger things like how they handle scopes of variables and types. All in all, if you have mastered one language it is pretty easy to learn another language up to a decent level.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-7"><a href="https://cs50.harvard.edu/college/2022/spring/notes/7/" target="_blank" rel="noopener noreferrer">Lecture 7</a><a href="#lecture-7" class="hash-link" aria-label="Direct link to lecture-7" title="Direct link to lecture-7">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-processing">Data processing<a href="#data-processing" class="hash-link" aria-label="Direct link to Data processing" title="Direct link to Data processing">​</a></h3><p>When downloading datasets or even collecting them yourself, most of them are not cleaned. Which means, there might be typos, different names for the same thing, columns which should be multiple columns and much more ugliness. Python is well equipped to clean data, especially with the help of regular expressions. However for quick fixes or searches a database language like sqlite is probably easier. To combine both, one can execute sql commands from within python with the sqlite library.<br>
<!-- -->When working with databases the most important thing is to escape user input to avoid injection attacks. When working with multiple servers and multiple users one should lock data that is currently changed by one server. Otherwise a second server might change the same data at the same time and one change gets lost or even worse unintended stuff happens.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-8"><a href="https://cs50.harvard.edu/college/2022/spring/notes/8/" target="_blank" rel="noopener noreferrer">Lecture 8</a><a href="#lecture-8" class="hash-link" aria-label="Direct link to lecture-8" title="Direct link to lecture-8">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-internet">The internet<a href="#the-internet" class="hash-link" aria-label="Direct link to The internet" title="Direct link to The internet">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ip">IP<a href="#ip" class="hash-link" aria-label="Direct link to IP" title="Direct link to IP">​</a></h4><p>The internet is basically just a big web of all the routers and in extension the computers/devices and servers of a lot of people in the world. One can send information to any other point in that web. To achieve that, one needs the internet protocol (IP) to tell the routers where to send the information.  </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="tpcudp">TPC/UDP<a href="#tpcudp" class="hash-link" aria-label="Direct link to TPC/UDP" title="Direct link to TPC/UDP">​</a></h4><p>TPC is another protocol that helps with sending information to different programs of one IP address. It also allows sending large chunks of data in multiple parts. If the user has a bad connection certain parts can be sent again instead of all the parts. UDP is a protocol that allows sending large amounts of data, but it doesn't grantee delivery. This is useful for calls or other real time applications as one doesn't want to wait for new data, just to resend earlier data to get the perfect result.  </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="dns">DNS<a href="#dns" class="hash-link" aria-label="Direct link to DNS" title="Direct link to DNS">​</a></h4><p>When you type in a address in your web browser the computer and then your router somehow needs to know what IP address corresponds to the web address. This is done with DNS servers, which have huge lists which save these correspondences. So your router always first contacts a DNS server and gets a IP address back, which then can be used to contact the correct server to get the information one wants.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="clientside">Clientside<a href="#clientside" class="hash-link" aria-label="Direct link to Clientside" title="Direct link to Clientside">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="http">HTTP<a href="#http" class="hash-link" aria-label="Direct link to HTTP" title="Direct link to HTTP">​</a></h4><p>Browsers use Hypertext Transfer Protocol (HTTP) to interface with TPC/IP packets. HTTPS ensures the packets that arrive at the browser are encrypted.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="url">URL<a href="#url" class="hash-link" aria-label="Direct link to URL" title="Direct link to URL">​</a></h4><p>A web address like <a href="https://www.google.com" target="_blank" rel="noopener noreferrer">https://www.google.com</a> is also called a URL.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="getpost">GET/POST<a href="#getpost" class="hash-link" aria-label="Direct link to GET/POST" title="Direct link to GET/POST">​</a></h4><p>GET and POST requests can be used by browsers to request content from servers.<br>
<!-- -->You can use <code>curl</code> on the command line to check the headers of the responses of servers to GET requests.  </p><div class="language-zsh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-zsh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">curl -I -X GET https://www.harvard.edu/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The status codes one gets back can then be interpreted and used to modify the request to get the correct response.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="html">HTML<a href="#html" class="hash-link" aria-label="Direct link to HTML" title="Direct link to HTML">​</a></h4><p>Hypertext Markup Language is used to tell the browser what and how to display information. It is however not a programming language.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="css">CSS<a href="#css" class="hash-link" aria-label="Direct link to CSS" title="Direct link to CSS">​</a></h4><p>To style HTML one can use Cascading Style Sheets (CSS) which isn't a programming language either.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="javascript">JavaScript<a href="#javascript" class="hash-link" aria-label="Direct link to JavaScript" title="Direct link to JavaScript">​</a></h4><p>To change elements and styling one can use JavaScript, which is a programming language. It will be executed on the device of the user.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lecture-9"><a href="https://cs50.harvard.edu/college/2022/spring/notes/9/" target="_blank" rel="noopener noreferrer">Lecture 9</a><a href="#lecture-9" class="hash-link" aria-label="Direct link to lecture-9" title="Direct link to lecture-9">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="web-server-programming">Web server programming<a href="#web-server-programming" class="hash-link" aria-label="Direct link to Web server programming" title="Direct link to Web server programming">​</a></h3><p>A framework like flask or django can be used to program a server with python to send responses to users. So when the user types in a certain URL or clicks on a link, the server sends data in terms of a HTML page, CSS and JavaScript back. This data can be dynamically generated with the full power of python. The python code then communicates on the server with a database, sometimes on another server.<br>
<!-- -->This enables accounts and other things where the website needs to remember stuff about the user. Often times, for example for autocomplete it is helpful to use a mix of JavaScript and serverside code to accelerate the results, as responses from the server take some time compared to calculations on device.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Daily ToDos]]></title>
            <link>https://mokronos.github.io/blog/daily</link>
            <guid>https://mokronos.github.io/blog/daily</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[- program autotuner for hyperparameter optimization]]></description>
            <content:encoded><![CDATA[<ul><li><p>program autotuner for hyperparameter optimization</p></li><li><p>get basic blocks for good project structure going</p></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Data Preparation and Feature Engineering]]></title>
            <link>https://mokronos.github.io/blog/data_preparation</link>
            <guid>https://mokronos.github.io/blog/data_preparation</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[SQL is probably most useful, when it just comes to data manipulation and query. Excel is easier because it is more "what you see is what you get" due to the UI. If you need to go beyond data manipulation into machine learning python is probably the best.]]></description>
            <content:encoded><![CDATA[<p>SQL is probably most useful, when it just comes to data manipulation and query. Excel is easier because it is more "what you see is what you get" due to the UI. If you need to go beyond data manipulation into machine learning python is probably the best.<br>
<!-- -->To learn SQL and use python for establishing a pipeline for machine learning, the best thing might be to use python to automate SQL commands. For quick stuff google sheets is probably good to learn.</p><h1>Overview</h1><p>Machine Learning generally tries to recognize patterns in data to then generate new data points.
To achieve that, one needs to generate and transform a dataset to feed into the algorithms.</p><p>Mainly just notes taken from <a href="https://developers.google.com/machine-learning/data-prep" target="_blank" rel="noopener noreferrer">Google</a>.</p><h1>Dataset Generation</h1><h1>Dataset Transformation</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-transform">When to transform<a href="#when-to-transform" class="hash-link" aria-label="Direct link to When to transform" title="Direct link to When to transform">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="prior-to-training">Prior to training<a href="#prior-to-training" class="hash-link" aria-label="Direct link to Prior to training" title="Direct link to Prior to training">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pros">Pros<a href="#pros" class="hash-link" aria-label="Direct link to Pros" title="Direct link to Pros">​</a></h4><ul><li>computation only performed once</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="cons">Cons<a href="#cons" class="hash-link" aria-label="Direct link to Cons" title="Direct link to Cons">​</a></h4><ul><li>Transformations need to be reproduced at prediction time. New data can be unpredictable.</li><li>need to rerun dataset generation when changing transformations, which may lead to slow iterations. Not an issue with a small dataset.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="within-the-model">Within the model<a href="#within-the-model" class="hash-link" aria-label="Direct link to Within the model" title="Direct link to Within the model">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pros-1">Pros<a href="#pros-1" class="hash-link" aria-label="Direct link to Pros" title="Direct link to Pros">​</a></h4><ul><li>can always use the same data, as happen in the model.</li><li>when changing transformations the same data is still used, which leads to fast iterations.</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="cons-1">Cons<a href="#cons-1" class="hash-link" aria-label="Direct link to Cons" title="Direct link to Cons">​</a></h4><ul><li>transformations can increase latency, this is the case with transformations at prediction time as well.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualizations">Visualizations<a href="#visualizations" class="hash-link" aria-label="Direct link to Visualizations" title="Direct link to Visualizations">​</a></h2><p>Always look at graphs or other visualizations of your dataset, before and after transformations to detect errors or irregularities.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="normalization">Normalization<a href="#normalization" class="hash-link" aria-label="Direct link to Normalization" title="Direct link to Normalization">​</a></h2><p>When having features with highly different ranges of numeric values it is recommended to perform normalization.
Gradient decent can have issues and slowly converge otherwise.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Training Guide]]></title>
            <link>https://mokronos.github.io/blog/deep_learning</link>
            <guid>https://mokronos.github.io/blog/deep_learning</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Expand on this.]]></description>
            <content:encoded><![CDATA[<p>Expand on <a href="http://karpathy.github.io/2019/04/25/recipe/" target="_blank" rel="noopener noreferrer">this</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Docker]]></title>
            <link>https://mokronos.github.io/blog/docker</link>
            <guid>https://mokronos.github.io/blog/docker</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[I wanted to just have a raw ubuntu install to test my dotfiles.]]></description>
            <content:encoded><![CDATA[<p>I wanted to just have a raw ubuntu install to test my dotfiles.</p><ol><li>Create Dockerfile</li></ol><div class="language-dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dockerfile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM ubuntu:latest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>Build image</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> build -t ubuntu </span><span class="token builtin class-name" style="color:rgb(189, 147, 249)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>-t creates a tag for this image, to reference it later.  </p><ol start="3"><li>Run image</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> run --name ubuntu -td ubuntu</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>--name gives the container a name, so you can reference it later.<br>
<!-- -->-t allocates a pseudo-TTY, so when all processes defined in Dockerfile are finished, the container will not exit.<br>
<!-- -->-d keeps the container running in the background.  </p><ol start="4"><li>Attach to container</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> </span><span class="token builtin class-name" style="color:rgb(189, 147, 249)">exec</span><span class="token plain"> -i -t ubuntu /bin/bash</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>-i interactive mode<br>
<!-- -->-t allocate a pseudo-TTY<br>
<!-- -->runs bash in the container and attaches to it. Uses name specified in --name.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Electric vehicles]]></title>
            <link>https://mokronos.github.io/blog/electric_vehicles</link>
            <guid>https://mokronos.github.io/blog/electric_vehicles</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Ideally we would all be using public transport, bicyles and our legs. But humans want for various reasons personal vehicles. Currently we mainly use internal combustion engines (ICE) cars. Due to their emission of co2 and resulting human made climate change we need other solutions in the long term. Electric vehicles are the prime candidate for that position.]]></description>
            <content:encoded><![CDATA[<p>Ideally we would all be using public transport, bicyles and our legs. But humans want for various reasons personal vehicles. Currently we mainly use internal combustion engines (ICE) cars. Due to their emission of co2 and resulting human made climate change we need other solutions in the long term. Electric vehicles are the prime candidate for that position.</p><p>There are other possibilities like hydrogen fuel cell or biofuel engines. But these "solutions" might only be feasible in the future. But we need a solution right now and with battery electric vehicles (BEVs) we have everthing we need. The only thing BEVs lack behind other options is the range and the charging speed. But is not a concern for most people in everyday life because the can charge at home over night and almost never need to drive the maximum range in their daily life.</p><p>The other concern many people have is that BEVs are actually not more "green" than ICEs due to the high energy use when producing the battery and that buying a tesla is not environmentally friendly. There is a more difficult and an easy argument against this.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Investing]]></title>
            <link>https://mokronos.github.io/blog/etf_investing</link>
            <guid>https://mokronos.github.io/blog/etf_investing</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[!!! Es wurden nur 1-2 verschiedene Quellen angegeben, allerdings sind die meisten Aussagen nicht wirklich kontrovers. Die meisten Dinge lassen sich schnell auf Investopedia oder anderen Seiten finden. Ich war nur zu faul alles anzugeben.]]></description>
            <content:encoded><![CDATA[<p><strong>!!! Es wurden nur 1-2 verschiedene Quellen angegeben, allerdings sind die meisten Aussagen nicht wirklich kontrovers. Die meisten Dinge lassen sich schnell auf Investopedia oder anderen Seiten finden. Ich war nur zu faul alles anzugeben.</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="timeframe">Timeframe<a href="#timeframe" class="hash-link" aria-label="Direct link to Timeframe" title="Direct link to Timeframe">​</a></h2><p>~15 years</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="etf">ETF<a href="#etf" class="hash-link" aria-label="Direct link to ETF" title="Direct link to ETF">​</a></h2><p>ETFs sind wie Fonds, kleine Anteile von Unternehmen in "Packet". Kann dadurch über verschiedene Branchen und über die ganze Welt geographisch gestreut werden. Daraus folgt, dass nicht mehr in bestimmte Unternehmen, sondern in den <strong>gesamten Markt</strong> investiert wird.</p><p>Der Unterschied von ETFs im Vergleich zu Fonds ist das Management. Fonds werden von Angestellten von Banken gemanaged und <strong>aktiv Aktien hinzugefügt oder verkauft</strong>. Dies ist mit <strong>Personalkosten</strong> verbunden. ETFs werden <strong>automatisch gemanaged</strong> und versuchen so genau wie möglich einem <strong>Index zu folgen</strong>. Diese Indizes werden auf Basis von bestimmten Regeln aufgestellt. Mcsi world setzt sich beispielsweise aus den top (70%) Unternehmen mit den höchsten Marktkapitalisierung aus bestimmten Ländern zusammen. Die Kostenunterschiede zwischen ETFs und aktiven Fonds beträgt meist <strong>~1%</strong>.</p><p>Diese Differenz muss durch die Experten der Banken, welche diese Fonds managen, <strong>zusätzlich zu der Rendite des ETFs</strong> erreicht werden, sodass der Fond ein besseres Investment als der ETF ist. Dies wird meist nicht erreicht bzw. ist wieder ein Glücksspiel in sich selbst, da der "richtige" Fond herausgesucht werden muss und oft sind diese nicht wirklich transparent. Zudem ist es so gut wie <strong>unmöglich den Markt zu verstehen</strong> und falls Experten dies täten, würden sie vermutlich keine Fonds managen sondern selbst traden und nicht mehr arbeiten müssen.</p><p>Die Annahme, dass der <strong>Markt immer weiter steigt</strong>, ist warscheinlich korrekt. Menschen wollen schon immer mehr Dinge und ein "besseres" Leben. Die Industrieländer sind vielen Teilen der Welt vorraus. Auch wenn die Industrieländer sich entscheiden sollten nicht mehr so viel zu produzieren (evtl. auf Grund des Klimawandels) wird vermutlich immer noch der Rest der Welt nachziehen und Güter benötigen. Zudem wird dies vermutlich nicht in den nächsten ~30 Jahren passieren, wenn überhaupt.</p><p><a href="https://ystat.org/" target="_blank" rel="noopener noreferrer">Mcsi world über 15 jahre</a> (seite down <!-- -->→<!-- --> <a href="https://backtest.curvo.eu/portfolio/msci-world--NoIgsgygwgkgBAdQPYCcA2ATEAaYoAyAqgIwDsAHMQKwAsxZAnDsQLptA" target="_blank" rel="noopener noreferrer">ähnlich</a>) median rendite 8.78%, <strong>schlechteste 3.16% pro jahr</strong> (abhängig davon wann gekauft/verkauft wird). Das wichtigste ist, dass die varianz mit längeren Investmentperioden sinkt und nach 10-15 Jahren die Chance für positive Rendite über 90% liegt und nach 20 Jahren gar bei 100% (auf der <a href="https://backtest.curvo.eu/portfolio/msci-world--NoIgsgygwgkgBAdQPYCcA2ATEAaYoAyAqgIwDsAHMQKwAsxZAnDsQLptA" target="_blank" rel="noopener noreferrer">Seite</a> zu Minimum investment horizon und Compute clicken). Natürlich sind dies historische Daten und garantieren nichts für die Zukunft, jedoch sind sie trotzdem gute Anhaltspunkte, da der gesamte Markt sich in Zukunft vermutlich auf lange Sicht ähnlich verhalten wird.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="broker">Broker<a href="#broker" class="hash-link" aria-label="Direct link to Broker" title="Direct link to Broker">​</a></h2><ul><li>Hohe Sicherheit (haben eigentlich alle hier in Deutschland + deutsche Einlagensicherung bis 100.000€)</li><li>keine Verwahrungsgebüren (ist bei den meisten auch so)</li><li>geringe Kosten für einmaligen Kauf (gut wenn pauschal, schlecht wenn %)</li></ul><p>Es ist schwer Beispiele zu nennen, da die Konditionen der Broker sich andauernd ändern. Generell bieten jedoch die "alten" Banken schlechtere Konditionen. Ein weiterer wichtiger Faktor ist oft, ob die Broker eine gute App und Website anbieten, da viele Banken noch sehr hinterher sind. Am besten kurz immer YouTube Videos angucken, um die Apps in Aktion zu sehen. Man könnte allerdings auch argumentieren, dass es besser ist keine oder keine gute App zu haben, da dies bei vielen Leuten zu Impuls Käufen oder Verkäufen führen kann, da es so einfach ist. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nachhaltigkeit">Nachhaltigkeit<a href="#nachhaltigkeit" class="hash-link" aria-label="Direct link to Nachhaltigkeit" title="Direct link to Nachhaltigkeit">​</a></h2><ul><li><strong>ESG</strong>: Ziel ist immer noch Performance. Es werden Unternehmen ausgeschlossen die durch bestimmte umweltschädlichen, sozialen oder ihr Regime negativ auffallen, und dadurch auch eventuell schlechtere Performance erreichen (so weit ich weiß wurde aber noch keine klare Korrelation mit schlechterer Performance festgestellt).</li><li><strong>SRI</strong>: strenger als ESG, suchen aktiv Unternehmen nach ethischen Richtlinien herraus, verwenden allerdings auch teilweise das ESG-Rating zur auswahl, nur die Grenze ist strenger.</li></ul><p>Gute Videos dafür: <a href="https://www.youtube.com/watch?v=6kIzjD_seLI" target="_blank" rel="noopener noreferrer">[1]</a><a href="https://www.youtube.com/watch?v=VeBHRURmh1U" target="_blank" rel="noopener noreferrer">[2]</a> oder in <a href="https://www.finanzfluss.de/geldanlage/nachhaltige-etfs/" target="_blank" rel="noopener noreferrer">Text Form</a>.</p><p>Oder einfach <a href="https://www.investopedia.com/financial-advisor/esg-sri-impact-investing-explaining-difference-clients/" target="_blank" rel="noopener noreferrer">Investopedia</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7030">70/30<a href="#7030" class="hash-link" aria-label="Direct link to 70/30" title="Direct link to 70/30">​</a></h2><p>Mit dem MSCI World werden nur die Industrieländer abgedeckt. Um noch breiter zu diversifizieren ist es sinnvoll ca. 30% des Portfolios in beispielsweise den MSCI World Emerging Markets (EM), welcher viele Schwellenländer noch mit abdeckt. Alternativ ist es noch möglich etwas Europa dazuzunehmen, wenn die Übergewichtung der USA im MSCI World nicht gefällt.</p><p><a href="https://www.finanzfluss.de/etf-handbuch/etf-portfolio/" target="_blank" rel="noopener noreferrer">Hier</a> noch ein paar andere Porfolioarten zum Vergleich.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mögliche-etfs">Mögliche ETFs<a href="#mögliche-etfs" class="hash-link" aria-label="Direct link to Mögliche ETFs" title="Direct link to Mögliche ETFs">​</a></h2><p><strong>MSCI World SRI (70%):</strong></p><ul><li>Amundi Index MSCI World SRI UCITS ETF DR (WKN: A2JSDA ISIN: LU1861134382)</li></ul><p><strong>MSCI World Emerging Markets SRI (30%):</strong></p><ul><li>iShares MSCI EM SRI UCITS ETF (WKN: A2AFCZ ISIN: IE00BYVJRP78)</li><li>Amundi Index MSCI Emerging Markets SRI UCITS DR ETF (C) (WKN: A2JSDD ISIN: LU1861138961)</li></ul><p>Zum finden ist <a href="https://justetf.com/en/find-etf.html" target="_blank" rel="noopener noreferrer">justETF</a> gut. Einfach einen Index auswählen und nach Kriterien filtern. Hier noch eine <a href="https://www.finanzfluss.de/etf-handbuch/etf-auswahl-kriterien/" target="_blank" rel="noopener noreferrer">Seite</a> für Tips auf welche Dinge bei der Auswahl zu achten ist.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fake news]]></title>
            <link>https://mokronos.github.io/blog/fakenews</link>
            <guid>https://mokronos.github.io/blog/fakenews</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Google bias]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="google-bias">Google bias<a href="#google-bias" class="hash-link" aria-label="Direct link to Google bias" title="Direct link to Google bias">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-enduring-anti-black-racism-of-google-search">The Enduring Anti-Black Racism of Google Search<a href="#the-enduring-anti-black-racism-of-google-search" class="hash-link" aria-label="Direct link to The Enduring Anti-Black Racism of Google Search" title="Direct link to The Enduring Anti-Black Racism of Google Search">​</a></h3><p>link: <a href="https://onezero.medium.com/the-enduring-anti-black-racism-of-google-search-d024924bff77" target="_blank" rel="noopener noreferrer">https://onezero.medium.com/the-enduring-anti-black-racism-of-google-search-d024924bff77</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="bad-article">Bad article<a href="#bad-article" class="hash-link" aria-label="Direct link to Bad article" title="Direct link to Bad article">​</a></h4><p>A search engines job should be to get users the information they want. It feels like the baseline for zero bias is what the internet offers. So when the whole internet is nine images of an apple and one image of a banana, it would be good to expect an apple more often when searching for "fruit".</p><p>So when there are the tags for "black girls" are overwhelmingly found on porn sites it should be to no surprise that google shows those when searching for "black girls".</p><p>It feels like, if google would not intervene in the "societal" distribution of the search results, we would have more racist search results, as one can see at the exact example in the article. So to blame google instead of the culture of the people is wrong. So google actually does bias the results, however one could argue that that's a good thing. The author shouldn't blame google for the few times reality was shining through, but thank google for adjusting some bad baselines in society.</p><p>It might be helpful to get some diversification in the workplace to help these things, however those need not necessarily be engineers, as the manual adjustments shouldn't have anything to do with engineering, rather with social studies or ethics.</p><p>The whole thing is hard to evaluate since we don't exactly know how google selects the search results, however the alternatives are hard to imagine. Is the implication of the article that google engineers went ahead and weighted porn websites higher when searching for "black girls" instead of "white girls"? What would be the motive behind that?</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="some-weird-quotes">Some weird quotes<a href="#some-weird-quotes" class="hash-link" aria-label="Direct link to Some weird quotes" title="Direct link to Some weird quotes">​</a></h4><blockquote><p>Pornography is a specific type of representation that denotes male power, female powerlessness, and sexual violence.</p></blockquote><p>This feels wrong.</p><blockquote><p>Porn on the internet is an expansion of neoliberal capitalist interests. The web itself has opened up new centers of profit and pushed the boundaries of consumption. Never before have there been so many points for the transmission and consumption of these representations of Black women’s bodies, largely trafficked outside the control and benefit of Black women and girls themselves.</p></blockquote><ul><li>Why is an expansion of capitalist interests bad?</li><li>Isn't that good for a lot of people?</li><li>What does neoliberalism have to do with it? </li><li>The assumption that the consumption is "largely" outside the benefit of black woman needs to be justified.<ul><li>black woman that do porn do benefit? If they are exploited there is another question. (more fame, money, like music labels)</li><li>why only for black woman? And what about men in porn? (earn way less than woman)</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gunn-and-lynch-googling-2019">Gunn and Lynch Googling (2019)<a href="#gunn-and-lynch-googling-2019" class="hash-link" aria-label="Direct link to Gunn and Lynch Googling (2019)" title="Direct link to Gunn and Lynch Googling (2019)">​</a></h3><p>Chapter 4, page 41-51</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="risks-of-googling">Risks of googling<a href="#risks-of-googling" class="hash-link" aria-label="Direct link to Risks of googling" title="Direct link to Risks of googling">​</a></h4><ul><li>anonymity, no accountability of face-to-face information. Not a google issue, internet issue.</li><li>no way to make sure that information is good, same issue in real life, but internet gives broader view quickly. One needs to check multiple sources, integrate in world view and check for inconsistencies.</li><li>reductionism<ul><li>reductionism: trust is earned not assumed</li><li>anti-reductionism: just trust others, assuming they have similar thinking faculties</li></ul></li><li>google searches lead to most wanted results, assumed to be right, because many others found it to be right</li><li>trust if author is trusted, problematic, but not unique to internet<ul><li>collective of authors (wikis)</li><li>some are automated (currency exchange)</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="selecting-sources">selecting sources<a href="#selecting-sources" class="hash-link" aria-label="Direct link to selecting sources" title="Direct link to selecting sources">​</a></h4><ul><li>more reliable information is shared more, higher in ranking, good</li><li>sometimes information of influencers does have popularity-because-popular, bad</li><li>there are often experts on both sides, use institutional markers</li><li>use of likes, upvotes, titles (must not necessarily be a good marker)</li><li>advertising can be misleading</li><li>Wikipedia can be good as everything needs source from expert, but can be outdated due to lag of checkups</li><li>not all people are able to select "good" sources, most just accept everything google gives them first.</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="google-in-brain">Google in Brain<a href="#google-in-brain" class="hash-link" aria-label="Direct link to Google in Brain" title="Direct link to Google in Brain">​</a></h4><ul><li>extend brain with chip, access fast amounts of information at speed of thought</li><li>accelerates effects/issues above</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="epistemic-agency">Epistemic Agency<a href="#epistemic-agency" class="hash-link" aria-label="Direct link to Epistemic Agency" title="Direct link to Epistemic Agency">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tugend">Tugend<a href="#tugend" class="hash-link" aria-label="Direct link to Tugend" title="Direct link to Tugend">​</a></h3><p>Verantwortung
Anonymity</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="on-trusting-wikipedia">On trusting Wikipedia<a href="#on-trusting-wikipedia" class="hash-link" aria-label="Direct link to On trusting Wikipedia" title="Direct link to On trusting Wikipedia">​</a></h2><ul><li>generally trusted</li><li>not always correct</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wikipedia-and-the-epistemology-of-testimony-by-deborah-perron-tollefsen">Wikipedia and the epistemology of testimony (by deborah perron tollefsen)<a href="#wikipedia-and-the-epistemology-of-testimony-by-deborah-perron-tollefsen" class="hash-link" aria-label="Direct link to Wikipedia and the epistemology of testimony (by deborah perron tollefsen)" title="Direct link to Wikipedia and the epistemology of testimony (by deborah perron tollefsen)">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h3><ul><li>studies mainly focus on individual testimony</li><li>group testimony can't always be understood as just a summation of individual testimony</li><li>the group itself testifies</li><li>example Wikipedia</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="questions">Questions<a href="#questions" class="hash-link" aria-label="Direct link to Questions" title="Direct link to Questions">​</a></h3><ul><li>Is Wikipedia a source of testimony?</li><li>What is the nature of that source?<ul><li>the individuals that make entries</li><li>a subset of individuals</li><li>the entity Wikipedia itself</li></ul></li><li>How can we asses the trustworthiness of Wikipedia as such an unusual epistemic source?</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="are-the-statements-on-wikipedia-testimony">Are the statements on Wikipedia testimony?<a href="#are-the-statements-on-wikipedia-testimony" class="hash-link" aria-label="Direct link to Are the statements on Wikipedia testimony?" title="Direct link to Are the statements on Wikipedia testimony?">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="define-testimony">define testimony<a href="#define-testimony" class="hash-link" aria-label="Direct link to define testimony" title="Direct link to define testimony">​</a></h4><ul><li>conservative (Coady 1992)<ul><li>speakers intention to present evidence on a specific matter in the interest of the audience</li></ul></li><li>liberal (E. Fricker 1995, Sosa 1991)<ul><li>"tellings in general" with no restriction on the domain</li></ul></li><li>Jennifer Lackey (2006)<ul><li>"S testifies that p by making an act of communication a if and only if (in part) in virtue of a’s communicable content, (1) S reasonably intends to convey the information that p, or (2) a is reasonably taken as conveying the information that p."</li><li>so it is a testimony if the speaker intends to convey information or if the audience takes it as such</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="wikipedia-as-testimony">Wikipedia as testimony<a href="#wikipedia-as-testimony" class="hash-link" aria-label="Direct link to Wikipedia as testimony" title="Direct link to Wikipedia as testimony">​</a></h4><p>All would obviously include Wikipedia as testimony.</p><p>Assumption: People are trolling, writing false information for fun.</p><p>Some definitions of testimony might be broken. Lackey's definition would still include Wikipedia as testimony, as people who read Wikipedia still assume it to be testimony.</p><p>Wray: not all entries are testimony, some are jokes, so nothing is testimony.</p><p>Doesn't mean nothing is testimony.</p><p>Testimony is not only what one believes, otherwise there would be no false testimony.</p><p>Moran(2006), Assurance view: Testimony comes with assurance that statement is true. Testifiers have responsibility to be truthful. They are aware that they might be questioned and need to explain themselves if the statement is false.</p><p>The same is true on Wikipedia. People can change information, but they know that they can then be called to question by other people that can discuss these changes and change them again.</p><p>Even if a troll is sometimes hard to track down and question, the information still is taken to come with assurances.</p><p>So none of the definitions of testimony would exclude Wikipedia as testimony.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="group-testimony">Group testimony<a href="#group-testimony" class="hash-link" aria-label="Direct link to Group testimony" title="Direct link to Group testimony">​</a></h3><p>New Question: Is the source the person that writes the entry or the entity Wikipedia?</p><p>When group decides something, it doesn't necessarily follow that all or most of the group, would testify the similarly.</p><p><strong>Example:</strong></p><p>NAS needed to make statement on long term genetic hazards of radiation exposure. It was a difficult decision, but needed to be made to protect the public from other, more harmful misinformation.  Some scientists even refused to sign it, because they thought it was indeterminable. In the end they all signed.</p><p>For a group G, speaker S, and utterance x, G utters x if and only if:</p><ol><li>There exists a group (G), this group has an illocutionary intention, and x conveys that illocutionary intention.</li><li>S believes that he or she knows the illocutionary intention of G and that x conveys this illocutionary intention.</li><li>G does not object to S uttering x on its behalf and if G intends for any specific individual(s) to utter x, it intends for S to utter x. S believes that he or she knows this.</li><li>2 and 3 are the reasons S utters x.</li></ol><p>Need to add 5th condition.</p><ol start="5"><li>S utters G in the proper social and normative context.</li></ol><p>This is important, as the NAS group would probably not have signed the statements, if it wasn't necessary to keep public trust and safety.</p><p>So group testimony (group speech act with conveyed information):</p><p>Group G testifies that p by making an act of communication a if and only if:</p><ol><li>(in part) in virtue of a’s communicable content G reasonably intends to convey the information that p.</li><li>The information that p is conveyed by either (i) a spokesperson S or (ii) a written document.</li><li>If (i), G does not object to S’s uttering p on its behalf and if G intends for any specific individual(s) to utter p, it intends for S to utter p and S believes that he or she knows this.</li><li>If (i), S utters p for the reasons in 3.</li><li>If (ii), G does not object to the way in which p is conveyed in writing.</li><li>G conveys the information that p in the right social and normative context.</li><li>In conveying the information that p in the right social and normative context, G is taken to have given its assurance that p is true.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="wikipedia-entries-as-group-testimony">Wikipedia entries as group testimony<a href="#wikipedia-entries-as-group-testimony" class="hash-link" aria-label="Direct link to Wikipedia entries as group testimony" title="Direct link to Wikipedia entries as group testimony">​</a></h3><p>Traits shared by groups (research teams, governments or corporations)</p><ul><li>share certain goals<ul><li>clear goals on Wikipedia: natural, balanced, verifiable knowledge to all for free</li><li>contributors have largely those goals, would be hard to explain otherwise</li></ul></li><li>are aware that they share these goals<ul><li>"Wikipedia community", "Wikipedians" are names used, Wikipedia conferences exist</li><li>there are pages on Wikipedia that explain itself, so its self reflective</li></ul></li><li>group decision making process with specific rules</li><li>group members have special rights and obligations</li></ul><p>Articles are testimony of Wikipedia once they have been discussed at length and have been approved by the community, they become featured or good articles.</p><p>Until then, they are either individual or group testimony.</p><p>The trustworthiness of Wikipedia needs to be monitored in those early stages, while "steadying ones mind", almost like a child.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trustworthiness-of-wikipedia">Trustworthiness of Wikipedia<a href="#trustworthiness-of-wikipedia" class="hash-link" aria-label="Direct link to Trustworthiness of Wikipedia" title="Direct link to Trustworthiness of Wikipedia">​</a></h3><p>Anti-reductionism: Trust others, assuming they have similar thinking faculties. (normal conversation)
Reductionism: Trust, if there are positive reasons, that the other person is sincere/reliable.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="anti-reductionism">Anti-reductionism<a href="#anti-reductionism" class="hash-link" aria-label="Direct link to Anti-reductionism" title="Direct link to Anti-reductionism">​</a></h4><p>Normal conversation with one person is on topics with not expertise, so anti-reductionism is fine. Generally groups have some kind of specific expertise (governmental, scientific, legal). With Wikipedia its different, because it speaks on a wide range of interests (more like a person on the street).</p><p>However the standard trust assumption of anti-reductionism may fail with Wikipedia, if it's treated as a child/unstable.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="reductionism">Reductionism<a href="#reductionism" class="hash-link" aria-label="Direct link to Reductionism" title="Direct link to Reductionism">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="scrutinize-the-speakerwikipedia">Scrutinize the speaker/Wikipedia<a href="#scrutinize-the-speakerwikipedia" class="hash-link" aria-label="Direct link to Scrutinize the speaker/Wikipedia" title="Direct link to Scrutinize the speaker/Wikipedia">​</a></h5><ul><li>Sum of individuals:<ul><li>check if some or all of the contributors are reliable</li><li>often short track record of contributors, hard to evaluate</li><li>mature articles could be closer to the truth than the individual entries of the contributors through the process of discussion and approval</li><li>might tell us nothing about the trustworthiness of Wikipedia</li></ul></li><li>Systematic cues:<ul><li>Programs can figure out anomalies (quick changes without discussion after long stable period, information that doesn't fit into the style of the article)</li><li>quick correction of spelling/grammatical errors might hide red flags for the content of the entry from the reader; one can still check the history (most probably wont)</li><li>trust the system not the individuals</li></ul></li></ul><h5 class="anchor anchorWithStickyNavbar_LWe7" id="scrutinize-the-content">Scrutinize the content<a href="#scrutinize-the-content" class="hash-link" aria-label="Direct link to Scrutinize the content" title="Direct link to Scrutinize the content">​</a></h5><p>Verify with own background knowledge. Integrate in world view and check for inconsistencies.
A UFO landed on the school roof (unlikely because of prior believe)
Trust the process and the reports, not the individuals.
There are incentives for groups to tell the truth(scientific groups, some corporations)</p><p>If group testimony is wildly at odds with your own knowledge, one has no reason to trust it.</p><p><strong>Wikipedia</strong>:</p><ul><li>incentives are in the structure of the system</li><li>entries will be checked against background knowledge</li><li>by challenging Wikipedia, its reliability increases through new policies and procedures</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3><ul><li>Wikipedia involves a mix of individual, group and Wikipedia testimony</li><li>Can't trust Wikipedia by default, yet (still a child)</li><li>Will get better once it matures, and doesn't need to be constantly monitored</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="discussion-questions">Discussion Questions<a href="#discussion-questions" class="hash-link" aria-label="Direct link to Discussion Questions" title="Direct link to Discussion Questions">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fake-news-and-partisan-epistemology">Fake News and Partisan Epistemology<a href="#fake-news-and-partisan-epistemology" class="hash-link" aria-label="Direct link to Fake News and Partisan Epistemology" title="Direct link to Fake News and Partisan Epistemology">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context-collapse">Context Collapse<a href="#context-collapse" class="hash-link" aria-label="Direct link to Context Collapse" title="Direct link to Context Collapse">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hopeful-trust">Hopeful Trust<a href="#hopeful-trust" class="hash-link" aria-label="Direct link to Hopeful Trust" title="Direct link to Hopeful Trust">​</a></h2><p>Pendulum swung too far:</p><ul><li><p>Tweets with misinformation are taken as truth because of labels of person (trans, black); Trust gets abused by speaker. It is assumed people trust the person just because of the label. Examples disproportionally damage trust in truthful speakers.</p><ul><li>trans person claiming periods <a href="https://twitter.com/poisonaivy69/status/1507362480158355508" target="_blank" rel="noopener noreferrer">https://twitter.com/poisonaivy69/status/1507362480158355508</a></li><li>jakob blake misinfo</li></ul></li><li><p>vulnerability invites trust, but only sometimes. On social media, one needs to take the average to see effect</p><ul><li>trump voters meet trans people in real life</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Habits]]></title>
            <link>https://mokronos.github.io/blog/habits</link>
            <guid>https://mokronos.github.io/blog/habits</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Don't multitask]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dont-multitask">Don't multitask<a href="#dont-multitask" class="hash-link" aria-label="Direct link to Don't multitask" title="Direct link to Don't multitask">​</a></h2><p>It just doesn't work, you think it works, but it doesn't. You're just switching between tasks, and you're not doing any of them well. Or you are doing one with 80% of your brain and the other 20%, so the one with 20% isn't even enjoyed, so why not do it with 100% of your brain in your free time.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="social-media-entertainment">Social media/ entertainment<a href="#social-media-entertainment" class="hash-link" aria-label="Direct link to Social media/ entertainment" title="Direct link to Social media/ entertainment">​</a></h2><p>Only watch them while eating or in free time. Then you can watch the highlights of the day, and not needing to search for cool stuff while you should be working or doing other things.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sleep">Sleep<a href="#sleep" class="hash-link" aria-label="Direct link to Sleep" title="Direct link to Sleep">​</a></h2><p>Keep sleep schedule, wake up early, try 8h.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="exercise">Exercise<a href="#exercise" class="hash-link" aria-label="Direct link to Exercise" title="Direct link to Exercise">​</a></h2><p>Mix running and at home exercise, depending on weather and state of mind. Don't miss two days in a row. Its easy to lose the habit then.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="eat-healthy">Eat healthy<a href="#eat-healthy" class="hash-link" aria-label="Direct link to Eat healthy" title="Direct link to Eat healthy">​</a></h2><p>Just count your calories, and eat filling foods. Mix it up, change some vegetables, proteins and spices in the recipes, mix up rice with noodles or lentils.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="work">Work<a href="#work" class="hash-link" aria-label="Direct link to Work" title="Direct link to Work">​</a></h2><p>Eliminate distractions. Block websites like YouTube, Twitch, Twitter, etc. Work for selected periods of time, but focused.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="do-your-bed">Do your bed<a href="#do-your-bed" class="hash-link" aria-label="Direct link to Do your bed" title="Direct link to Do your bed">​</a></h2><p>Yeah, sounds like the meme daddy Peterson tells you, but it helps, its a small task that's easy to accomplish, and it makes you feel good. It's a good habit to start with.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="shower">Shower<a href="#shower" class="hash-link" aria-label="Direct link to Shower" title="Direct link to Shower">​</a></h2><p>Just shower early in morning, makes you feel fresh and ready for the day. And wear clothes that you would wear in public or work. Makes you feel ready.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="walks">Walks<a href="#walks" class="hash-link" aria-label="Direct link to Walks" title="Direct link to Walks">​</a></h2><p>Take a walk without any distractions. No phone, just enjoy the nature. It's good for your mind and body. It may sound stupid, but it will make you feel better.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="todo-list">ToDo list<a href="#todo-list" class="hash-link" aria-label="Direct link to ToDo list" title="Direct link to ToDo list">​</a></h2><p>Don't put too many tasks on there, and make them as small as possible. That way, you can actually achieve them, and don't feel bad because you only managed to complete half of them by the end of the day.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="free-time">Free time<a href="#free-time" class="hash-link" aria-label="Direct link to Free time" title="Direct link to Free time">​</a></h2><p>You need some dedicated time to do whatever you want. If not, it will creep into the time you should be working.</p><p>Good time to socialize. Meeting friends helps.</p><h1>Default Schedule</h1><table><thead><tr><th>Time</th><th align="center">Task</th></tr></thead><tbody><tr><td>7:00</td><td align="center">Wake up, Shower, Get ready</td></tr><tr><td>7:30</td><td align="center">Go for a walk</td></tr><tr><td>7:50</td><td align="center">Breakfast</td></tr><tr><td>8:15</td><td align="center">Schedule my day</td></tr><tr><td>8:30</td><td align="center">Work</td></tr><tr><td>12:00</td><td align="center">Do exercise</td></tr><tr><td>12:30</td><td align="center">Lunch</td></tr><tr><td>13:30</td><td align="center">Work</td></tr><tr><td>19:00</td><td align="center">Dinner</td></tr><tr><td>19:30</td><td align="center">Do whatever I want</td></tr><tr><td>22:30</td><td align="center">Sleep</td></tr></tbody></table><h1>Alternative Schedule</h1><table><thead><tr><th>Time</th><th align="center">Task</th></tr></thead><tbody><tr><td>7:00</td><td align="center">Wake up, Shower, Get ready</td></tr><tr><td>7:30</td><td align="center">Go for a walk</td></tr><tr><td>7:50</td><td align="center">Breakfast</td></tr><tr><td>8:15</td><td align="center">Schedule my day</td></tr><tr><td>8:30</td><td align="center">Work</td></tr><tr><td>12:00</td><td align="center">Do exercise</td></tr><tr><td>12:30</td><td align="center">Lunch</td></tr><tr><td>13:30</td><td align="center">Work</td></tr><tr><td>17:00</td><td align="center">Do whatever I want</td></tr><tr><td>22:30</td><td align="center">Sleep</td></tr></tbody></table><h1>Rules</h1><ol><li>Only use social media during food slots</li><li>Socialize only after 16:00, if work is done.</li><li>Can take two days off each week, if i feel like it.</li><li>If I feel healthy and motivated, I can follow the routine every single day, without off days.</li></ol><h1>Food Plan (Weekly):</h1><table><thead><tr><th>Day</th><th align="center">Meal</th></tr></thead><tbody><tr><td>Monday</td><td align="center">Tofu, zucchini, bell pepper, soy sauce, ginger stir fry with white rice</td></tr><tr><td>Tuesday</td><td align="center">Lentil soup with a side of whole grain crackers/bread</td></tr><tr><td>Wednesday</td><td align="center">Quinoa bowl with roasted mushrooms and brokkoli with lemon juice</td></tr><tr><td>Thursday</td><td align="center">Tofu, zucchini, bell pepper, soy sauce, ginger stir fry with white rice</td></tr><tr><td>Friday</td><td align="center">Spinach and tomato omelet with whole grain toast</td></tr><tr><td>Saturday</td><td align="center">Wrap with hummus, roasted eggplant and arugula</td></tr><tr><td>Sunday</td><td align="center">Tofu, zucchini, bell pepper, soy sauce, ginger stir fry with white rice</td></tr></tbody></table><p>Every day: Spices (pepper, salt, thyme, rosemary, garlic powder)</p><h1>Shopping List (Wednesday):</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fresh">Fresh:<a href="#fresh" class="hash-link" aria-label="Direct link to Fresh:" title="Direct link to Fresh:">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vegetablesfruits">Vegetables/Fruits:<a href="#vegetablesfruits" class="hash-link" aria-label="Direct link to Vegetables/Fruits:" title="Direct link to Vegetables/Fruits:">​</a></h3><ul><li>3x zucchini</li><li>3x bell pepper</li><li>3x mushrooms</li><li>1x eggplant</li><li>tomatoes</li><li>brokkoli</li><li>fresh spinach</li><li>arugula</li><li>3x ginger</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other:<a href="#other" class="hash-link" aria-label="Direct link to Other:" title="Direct link to Other:">​</a></h3><ul><li>3x tofu</li><li>hummus</li><li>4x eggs</li><li>wraps</li><li>cheese</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bulk">Bulk:<a href="#bulk" class="hash-link" aria-label="Direct link to Bulk:" title="Direct link to Bulk:">​</a></h2><ul><li>soy sauce</li><li>quinoa</li><li>lentils</li><li>white rice</li><li>whole grain crackers/bread</li><li>hummus</li><li>lemon juice (oil)</li><li>spices (pepper, salt, thyme, rosemary, garlic powder)</li><li>vegetable broth powder</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to code]]></title>
            <link>https://mokronos.github.io/blog/how_to_code</link>
            <guid>https://mokronos.github.io/blog/how_to_code</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Notes taken from "What is Programming" by George Hotz.]]></description>
            <content:encoded><![CDATA[<p>Notes taken from <a href="https://www.youtube.com/watch?v=N2bXEUSAiTI" target="_blank" rel="noopener noreferrer">"What is Programming"</a> by George Hotz.</p><h1>Programs</h1><p>Input &gt; Program &gt; Output</p><p>Seems more like functional programming.</p><p>C is like assembly with some syntactic sugar.</p><p>Language spectra:</p><ul><li>Ease of use: C --&gt; Python</li><li>Functional: C --&gt; Haskell</li></ul><p>C --&gt; C++ was functional --&gt; object oriented.</p><p>Didn't really improve programmer productivity.</p><p>Garbage collection improved programmer productivity.</p><h1>Computer</h1><ul><li>Processor (CPU) --&gt; Stream of instructions</li><li>Memory (RAM) --&gt; Instructions + data</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hello-world-example">Hello World Example<a href="#hello-world-example" class="hash-link" aria-label="Direct link to Hello World Example" title="Direct link to Hello World Example">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">printf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hello world\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Compile with <code>gcc main.c</code> and run with <code>./a.out</code>.
The compilation will give some errors but it will still run.
And you can check out the instructions and memory with <code>objdump -D a.out</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="program">Program<a href="#program" class="hash-link" aria-label="Direct link to Program" title="Direct link to Program">​</a></h2><ul><li>.text: Instructions</li><li>bss: Static data</li><li>stack: local variables (control flow)</li><li>heap: malloc</li></ul><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> variable_on_the_stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \\ </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> by popping off the stack</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// pushes the return location of the function onto the stack</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>So in this example, the computer starts by executing the main function.
It then enters the a function and pushes the return location of the function onto the stack.
The a function does whatever it does, in our example, create a variable on the stack.
When the function ends, the variable gets popped off, so it does not exist anymore.
Then the return location gets popped off to know where to return to, in our case the main function after a.</p><p>This is "real" programming.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="programming-for-work">Programming for work<a href="#programming-for-work" class="hash-link" aria-label="Direct link to Programming for work" title="Direct link to Programming for work">​</a></h2><p>What does a software "engineer" do?</p><ul><li>not writing algorithms</li></ul><p>In reality they are just translating a (shitty) language aka "business requirements" into "code".</p><p>There are a lot of frameworks, like ruby on rails, that do a lot of the work for you (for example a website that enables users to leave their email address).
So you don't have to code, you just have to learn some weird syntax.</p><p>Ruby on rails, React (or similar) --&gt; Web app
CRUD apps &lt;-- Create, Read, Update, Delete</p><p>Frontend (View)
Database (Model)
Backend/Business Logic (Controller)</p><p>This whole thing might soon be automated by AI.</p><ol><li>Build a CRUD app contracting firm</li><li>Record all the inputs of my developers (translators for business requirements --&gt; code)</li><li>Train an AI model to translate "business requirements" --&gt; code</li></ol><p>So writing these kind of apps, is nothing like writing binary search algorithms or other lower level stuff, which is taught in school.
These two things are completely separate.</p><h1>Hacking</h1><p>Input --&gt; System --&gt; Output</p><p>To gain access to the System you need to know:</p><ul><li>What input achieves my desired outcome?</li></ul><p>Often times you can give a system an input that it does not expect and thus manage to get access to the system.
Figure out how to make the function behave how you want.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pure-model">Pure model<a href="#pure-model" class="hash-link" aria-label="Direct link to Pure model" title="Direct link to Pure model">​</a></h2><p>Domain --&gt; Function --&gt; Range
y = f(x)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="impure-model">Impure model<a href="#impure-model" class="hash-link" aria-label="Direct link to Impure model" title="Direct link to Impure model">​</a></h2><p>Function can output something outside of the range.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h2><p>Let's say we want to cancel a flight without paying the cancellation fee.
We can think of a few of the inputs we have to that system (airline agent can press a button on pc to cancel flight and waive the fee):</p><ul><li>We can call the agent and ask them</li><li>We have a huge amount of words to choose from for that conversation</li><li>We can do it in person</li><li>We can send an email</li><li>Or we can do something unexpected, or out of bounds of the "usual" input, like finding personal information about the agent and blackmailing them (not recommended)</li></ul><p>This way we could essentially hack the system.</p><h1>Guide for Software Engineers</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="high-brow-software-engineering">High Brow Software Engineering<a href="#high-brow-software-engineering" class="hash-link" aria-label="Direct link to High Brow Software Engineering" title="Direct link to High Brow Software Engineering">​</a></h2><ol><li>Understand a complex system</li><li>Modify the system to add a new feature</li><li>Test and ship the new system</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="machine-learning-engineer">Machine Learning Engineer<a href="#machine-learning-engineer" class="hash-link" aria-label="Direct link to Machine Learning Engineer" title="Direct link to Machine Learning Engineer">​</a></h2><ol><li>Download a paper</li><li>Implement the paper</li><li>Keep doing this until you are good</li></ol><h1>Funnels</h1><p>Funnels are essentially just a series of filters that can be applied to some group of things to get to the desired outcome.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="selling-cars">Selling cars<a href="#selling-cars" class="hash-link" aria-label="Direct link to Selling cars" title="Direct link to Selling cars">​</a></h2><ol><li>Top of the funnel: Advertise | 10000 people</li><li>Middle of the funnel: Test drive | 100 people</li><li>Bottom of the funnel: Buy | 5 people</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-a-partner">Getting a partner<a href="#getting-a-partner" class="hash-link" aria-label="Direct link to Getting a partner" title="Direct link to Getting a partner">​</a></h2><ol><li>Send a message | 100 people</li><li>Get a response | 30 people</li><li>Get a date | 5 people</li><li>Lays | 2 person</li><li>Partner | 1 person</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-money">Getting money<a href="#getting-money" class="hash-link" aria-label="Direct link to Getting money" title="Direct link to Getting money">​</a></h2><p>Capitalism.</p><p>Buyers and Sellers.
Both need to consent.</p><p>So we need to convince others to give us money.</p><p>How to get 1.000.000$?</p><ul><li>1$ from 1.000.000 people<ul><li>online only</li></ul></li><li>1.000$ from 1.000 people<ul><li>A couple phone calls can be spent to close deal</li></ul></li><li>1.000.000$ from 1 person<ul><li>A lot of effort can be spent to close deal</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="million-subs-on-instagram">Million Subs on Instagram<a href="#million-subs-on-instagram" class="hash-link" aria-label="Direct link to Million Subs on Instagram" title="Direct link to Million Subs on Instagram">​</a></h2><p>Followers and Influencers.
Both need to consent.</p><p>Convince 1.000.000 others to follow you.</p><ol><li>Appealing content<ul><li>"Novelty"</li><li>"Shock"</li><li>"Beauty"</li><li>"Sexuality"</li><li>"Comedy"</li></ul></li><li>Be famous<ul><li>FOMO &lt;-- Fear of missing something positive</li><li>"car crash" &lt;-- Fear of missing out on something negative</li></ul></li><li>Dark arts<ul><li>Buy followers<ul><li>Cracked accounts</li><li>New accounts</li></ul></li><li>Make Instagram private<ul><li>Mystery (Whats behind the curtain?)</li></ul></li></ul></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wasting-time">Wasting time<a href="#wasting-time" class="hash-link" aria-label="Direct link to Wasting time" title="Direct link to Wasting time">​</a></h2><p>Existentialism --&gt; You make your own meaning.</p><p>Don't fall in other people's funnels.
Don't be in skinner boxes.
Don't be influenced by advertising.</p><h1>What to learn</h1><p>Object level skills, like specific frameworks, or languages, are not that important.
They will die out at some point.</p><p>Meta level skills, like how to learn, are more important.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="example-data-science">Example Data Science<a href="#example-data-science" class="hash-link" aria-label="Direct link to Example Data Science" title="Direct link to Example Data Science">​</a></h2><p>Learning statistics is more important than learning Pytorch.
Statistics will always be useful, but Pytorch will be replaced at some point.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="knowledge-tree">Knowledge Tree<a href="#knowledge-tree" class="hash-link" aria-label="Direct link to Knowledge Tree" title="Direct link to Knowledge Tree">​</a></h2><p>Integrate new information into the tree. Build a world model.
In the case of not knowing something you are still able to make decent decisions based on interpolation.</p><p>The root of the tree might be something like physics, such that every data point that gets included in your tree can be distilled down to the smallest particles known in physics at the time.
This enables predictions about unknown data points.</p><p>Another tree root, arguably more advanced than physics, is information.
This is based on the paradigm from before (Input --&gt; System --&gt; Output).
This obviously includes physics as a sub tree.</p><p>"There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors."</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="leetcode-interviews">Leetcode Interviews<a href="#leetcode-interviews" class="hash-link" aria-label="Direct link to Leetcode Interviews" title="Direct link to Leetcode Interviews">​</a></h2><p>Insulting</p><p>Just shows if you can grind leetcode not if you are intelligent or a good programmer.
Programming challenges with an objective metric and a slight time limit.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Human Robot Interaction]]></title>
            <link>https://mokronos.github.io/blog/hri</link>
            <guid>https://mokronos.github.io/blog/hri</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Task]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="task">Task<a href="#task" class="hash-link" aria-label="Direct link to Task" title="Direct link to Task">​</a></h2><p>HRI interface comparisons with examples (VR, AR, bio-signal-based)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comparison-vr-ar-bio-signal-based">Comparison VR, AR, Bio-signal-based<a href="#comparison-vr-ar-bio-signal-based" class="hash-link" aria-label="Direct link to Comparison VR, AR, Bio-signal-based" title="Direct link to Comparison VR, AR, Bio-signal-based">​</a></h2><p>Advantage of all of them is that the user can often interact with the robot in a natural way through hand and body gestures. This makes it possible for users without the technical knowledge of controlling the robot traditionally, to control the robot.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="virtual-realityvr">Virtual reality(VR)<a href="#virtual-realityvr" class="hash-link" aria-label="Direct link to Virtual reality(VR)" title="Direct link to Virtual reality(VR)">​</a></h3><p>Virtual reality puts a human into a virtual world to interact with a robot. The human can see the robot and the robot can see the human. The human can interact with the robot by using a controller or by using their hands.
One important aspect is ability to get almost instant feedback from the robot motion. This is important for the human to be able to learn how to control the robot.
VR headsets can often be uncomfortable to wear for long periods of time. Newer headsets have batteries instead of cable connections, which can be better or worse depending on the use case.
VR could technically do the save as AR does, by just recording the world around the human and displaying parts of it in VR. However the technology isn't there yet to perfectly display reality, so there is still clearly a difference.
Could pre-render the actions given to the robot, before executing them.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="augmented-realityar">Augmented reality(AR)<a href="#augmented-realityar" class="hash-link" aria-label="Direct link to Augmented reality(AR)" title="Direct link to Augmented reality(AR)">​</a></h3><p>Augmented reality enhances the real world around the human with digital information to better interact with a robot. The human can see the robot and the robot can see the human. The human can interact with the robot by using a controller or by using their hands.
One difference to VR is the ability to also see and better interact with the real world around the human.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="bio-signal-based">Bio-signal-based<a href="#bio-signal-based" class="hash-link" aria-label="Direct link to Bio-signal-based" title="Direct link to Bio-signal-based">​</a></h3><p>Bio-signal-based devices can be used to control robots. Many different types of bio-signal-based devices exist, such as EEG, EOG, EMG, ECG, ERG, EGG, GSR and EDA.</p><ul><li>Electroencephalography (EEG): Measures electrical activity of the brain.</li><li>Electrooculography (EOG): Measures electrical activity of the eye.</li><li>Electromyography (EMG): Measures electrical activity of the muscles.</li><li>Electrocardiography (ECG): Measures electrical activity of the heart.</li><li>Electroretinography (ERG): Measures electrical activity of the retina.</li><li>Electroglottography (EGG): Measures electrical activity of the vocal cords.</li><li>Galvanic skin response (GSR)/Electrodermal activity (EDA): Measures electrical activity of the skin.</li></ul><p>These devices can be used to control robots in many different ways. For example, a person can control a robot by thinking about moving it, or by moving their eyes to look at different parts of the robot. Bio-signal-based devices can also be used to control robots by measuring the person's heart rate, or by measuring the person's sweat levels.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-abbreviations">Some abbreviations<a href="#some-abbreviations" class="hash-link" aria-label="Direct link to Some abbreviations" title="Direct link to Some abbreviations">​</a></h3><ul><li>ROS: Robot Operating System</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="general-papers">General papers<a href="#general-papers" class="hash-link" aria-label="Direct link to General papers" title="Direct link to General papers">​</a></h3><ul><li><p><a href="https://link.springer.com/content/pdf/10.1007/s43154-020-00005-6.pdf" target="_blank" rel="noopener noreferrer">https://link.springer.com/content/pdf/10.1007/s43154-020-00005-6.pdf</a></p><ul><li>overview of different HRI interfaces</li></ul></li><li><p><a href="https://graphics.cs.wisc.edu/Papers/2017/LRMG17/roman-vr-2017.pdf" target="_blank" rel="noopener noreferrer">https://graphics.cs.wisc.edu/Papers/2017/LRMG17/roman-vr-2017.pdf</a></p><ul><li>general paper about VR as a HRI interface</li></ul></li><li><p><a href="http://ti.rutgers.edu/publications/papers/1999_ieee_tra.pdf" target="_blank" rel="noopener noreferrer">http://ti.rutgers.edu/publications/papers/1999_ieee_tra.pdf</a></p><ul><li>paper about using VR for HRI</li><li>decent overview of VR</li></ul></li><li><p><a href="https://robotics.mit.edu/teleoperating-robots-virtual-reality" target="_blank" rel="noopener noreferrer">https://robotics.mit.edu/teleoperating-robots-virtual-reality</a></p><ul><li>MIT article</li></ul></li><li><p><a href="https://www.allerin.com/blog/ar-vr-and-other-ways-of-controlling-robots" target="_blank" rel="noopener noreferrer">https://www.allerin.com/blog/ar-vr-and-other-ways-of-controlling-robots</a></p><ul><li>article about different HRI interfaces</li><li>might be perfect overview</li></ul></li><li><p><a href="https://www.mdpi.com/1424-8220/21/20/6863" target="_blank" rel="noopener noreferrer">https://www.mdpi.com/1424-8220/21/20/6863</a></p><ul><li>huge summary/survey of bio-signal-based solutions</li><li>for assistance/rehabilitation</li></ul></li><li><p><a href="https://arxiv.org/pdf/2203.03254.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/2203.03254.pdf</a></p><ul><li>AR summary</li><li>2022 paper</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="general-comparisons">General comparisons<a href="#general-comparisons" class="hash-link" aria-label="Direct link to General comparisons" title="Direct link to General comparisons">​</a></h3><ul><li><p><a href="https://reader.elsevier.com/reader/sd/pii/S2212827120314815?token=674B622691122E381C72A6FD9A55D0F0163342C7E2F3F3785601BAECC912EB05ED29318E11A2834A7D0B9019B9EE27A6&amp;originRegion=eu-west-1&amp;originCreation=20221104125245" target="_blank" rel="noopener noreferrer">https://reader.elsevier.com/reader/sd/pii/S2212827120314815?token=674B622691122E381C72A6FD9A55D0F0163342C7E2F3F3785601BAECC912EB05ED29318E11A2834A7D0B9019B9EE27A6&amp;originRegion=eu-west-1&amp;originCreation=20221104125245</a></p><ul><li>Review of VR/AR solutions for HRI</li></ul></li><li><p><a href="https://cs.brown.edu/people/er35/publications/SIEDS_2020.pdf" target="_blank" rel="noopener noreferrer">https://cs.brown.edu/people/er35/publications/SIEDS_2020.pdf</a></p><ul><li>comparison of different VR approaches</li><li>positional control (waypoint navigation)</li><li>trajectory control (click and drag)</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="get-at-least-one-paper-with-an-example-for-every-interface-type-vr-ar-bio-signal-based">get at least one paper with an example for every interface type (VR, AR, bio-signal-based)<a href="#get-at-least-one-paper-with-an-example-for-every-interface-type-vr-ar-bio-signal-based" class="hash-link" aria-label="Direct link to get at least one paper with an example for every interface type (VR, AR, bio-signal-based)" title="Direct link to get at least one paper with an example for every interface type (VR, AR, bio-signal-based)">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vr">VR<a href="#vr" class="hash-link" aria-label="Direct link to VR" title="Direct link to VR">​</a></h4><ul><li><a href="https://arxiv.org/pdf/1903.10064.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1903.10064.pdf</a><ul><li>controlling a swarm of robots with VR</li><li>manipulating the environment in VR, zooming in and out</li><li>placing walls in the environment to block the robots</li><li>highlights intuitiveness of VR</li><li>gestures are intuitive, but need some training</li><li>visual information from the robots gets sent to pc and dynamically rendered in VR</li><li>technically human swarm interaction (HSI)</li><li>summary:
VR is used in \cite to control a swarm of robots. The robots are able to navigate and interact with each other on their own.
The user can use VR to manipulate the environment, zoom in and out, and place walls in the environment to block or guide the robots. Additionally the robots can be picked up and placed in a new location. Leap Motion is used to identify the users motions.
Thus the user can propose future actions or locations in the virtual environment and the robots will try to execute or move to them in the real world.
The authors conducted a usability study with 10 participants between the ages 20 and 35 with an engineering background. Is showed that the controls are intuitive and the test missions are accelerated with the help of human intervention. They note however that some of the gestures, specifically the wall placement and the world resizing, need some training to get used to.</li></ul></li></ul><ul><li><a href="https://h2r.cs.brown.edu/wp-content/uploads/whitney18.pdf" target="_blank" rel="noopener noreferrer">https://h2r.cs.brown.edu/wp-content/uploads/whitney18.pdf</a></li><li><a href="https://cs.brown.edu/people/gdk/pubs/vr_teleop.pdf" target="_blank" rel="noopener noreferrer">https://cs.brown.edu/people/gdk/pubs/vr_teleop.pdf</a><ul><li>controlling robots over the internet with VR (teleoperation)</li><li>created interface to be used by other researchers</li><li>can be used with consumer-grade headsets</li><li>testing approach: <a href="https://cs.brown.edu/people/er35/publications/testing.pdf" target="_blank" rel="noopener noreferrer">https://cs.brown.edu/people/er35/publications/testing.pdf</a><ul><li>establishes baseline for other research</li></ul></li></ul></li><li><a href="https://arxiv.org/pdf/1703.01270.pdf" target="_blank" rel="noopener noreferrer">https://arxiv.org/pdf/1703.01270.pdf</a><ul><li>control of robot arms in VR</li><li>VR Control Room</li><li>highlights collocation capabilities of VR</li><li>pick, place, assembly, manufacturing tasks</li><li>summary:
In \cite a team of researchers use VR to control a robot arm. The robot has two arms and is equipped with a camera at its "head". The user uses the consumer-grade headset Oculus Rift CV1 and two Razer Hydra hand trackers as controllers.
In VR the robot can then be controlled from a control room, which includes the view of the main camera and two optional views from the two robot arms. So the user feels as if they were in the robots head.
To test the system, the authors made an expert user pick up and assemble a Lego piece. They compared it to an automated algorithm on the same task and were able to show that the human performed perfect, whereas the algorithm showed some weakness on the assembly. The user reported that the cameras in the robot arms helped with the alignment of the pieces.
The teleoperation allows the user to perform actions from a save environment.
The paper highlights the ability of VR to utilize consumer-grade hardware.</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ar">AR<a href="#ar" class="hash-link" aria-label="Direct link to AR" title="Direct link to AR">​</a></h4><ul><li><a href="https://www.frontiersin.org/articles/10.3389/frobt.2017.00020/full" target="_blank" rel="noopener noreferrer">https://www.frontiersin.org/articles/10.3389/frobt.2017.00020/full</a><ul><li>uses tablet</li><li>displays information about the robots motion on the tablet</li><li>one tiltable camera, 1/3 of workspace visible at a time</li><li>uses the tablet to control the robot</li><li>3 interfaces: control with accelerometer of tablet<ul><li>egocentric: user sees the workspace from the robots perspective. Parts of the workspace are not observable due to the lack of field of view and movement of the camera.</li><li>exocentric: user sees the workspace from a fixed position on the ceiling. Vision under the robot arm is blocked, so some objects can't be interacted with.</li><li>mobile mixed reality: user sees workspace from tablet in arbitrary position. Can access any location.</li></ul></li><li>pretrial (place one box somewhere else)  was easier with AR plot over workspace enabled</li><li>mobile performs best</li><li>article about it: <a href="https://thenewstack.io/smartphone-app-can-control-robots-augmented-reality/" target="_blank" rel="noopener noreferrer">https://thenewstack.io/smartphone-app-can-control-robots-augmented-reality/</a></li><li>summary:
AR can be used to enhance the environment. In \cite the authors compare 3 interfaces. One egocentric, with a tiltable camera on the robots head, one exocentric, with the camera on the ceiling looking down, and the proposed method of using a mobile tablet as the camera. All three approaches use the tablets accelerometer to control the robots arms. The main advantage of the proposed method is, that its cameras field of view can reach all places, unlike the other two.
The users can see an overlay over the workspace on the tablet screen, where the robots maximum range of motion and potential actions can be projected.
When testing the system, users performed better on the pretrial, when having the AR plot enabled. Additionally the mobile reality interface shows better performance than the other two.
The main points to take away, are that this approach needs visual markers in the environment, the user and the robot need to be in the same environment for the mobile version and the AR overlay helps the user and the robot interact better.</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="bio-signal-based-1">Bio-signal-based<a href="#bio-signal-based-1" class="hash-link" aria-label="Direct link to Bio-signal-based" title="Direct link to Bio-signal-based">​</a></h4><ul><li><p><a href="https://link.springer.com/article/10.1007/s10514-020-09916-x" target="_blank" rel="noopener noreferrer">https://link.springer.com/article/10.1007/s10514-020-09916-x</a></p><ul><li>earlier work used only EEG: <a href="http://groups.csail.mit.edu/drl/wiki/images/e/ec/Correcting_Robot_Mistakes_in_Real_Time_Using_EEG_Signals.pdf" target="_blank" rel="noopener noreferrer">http://groups.csail.mit.edu/drl/wiki/images/e/ec/Correcting_Robot_Mistakes_in_Real_Time_Using_EEG_Signals.pdf</a></li><li>Uses EMG(muscle) + EEG(brain) to give swift feedback to robot</li><li>EMG is used to detect the users intention, EEG is used to detect potential errors the robot or the human makes</li><li>summary:
In the paper \cite the authors used a hybrid of electromyography (EMG) and electroencephalography (EEG) to control a arm with a tool on it. The robot was supposed to hit one of three holes in the wall in front of it with the electric screwdriver in their hand. The user is equipped with electrodes on their head and surface bar electrodes are applied to their forearms. The signals of those devices are processed separately and then used to determine the action of the robot arm.
The user observes the robot and its environment directly and tries to move the tool in the robots hand via muscle movements. When the robot or the user themself make a mistake, the users brain reacts a certain way, often unconsciously, which can be detected by the EEG processor. Those signals are then used to stop and then correct the robot.
The system was evaluated on 7 participants. The users were untrained, to reduce the hurdle for new users. The correct target was hit in roughly 70% of the trials, when the robot randomly chose. With the help of the correction through the participant, the success rate jumped to 97%.
The authors concluded, that the reliability needs to be improved to be able to deploy the system in safety critical situations. Specifically, the neural network that classified the EEG signal into mistake or no-mistake, had only a 54% accuracy. They also highlight that more users would be needed to make the system more robust towards inter-person variations. However, the system shows potential for an effective supervision system.</li></ul></li><li><p><a href="https://www.jmir.org/2019/10/e16194/" target="_blank" rel="noopener noreferrer">https://www.jmir.org/2019/10/e16194/</a></p><ul><li>neuralink whitepaper</li><li>uses brain signals to control a robot</li><li>might be interesting, but not used on humans yet</li><li>don't know if it "counts" as an example</li><li>mainly describes a way to get information out of the human brain, not however how to interpret it or control a robot.</li><li>but really important</li></ul></li><li><p><a href="https://static.aminer.org/pdf/PDF/000/329/658/emg_based_human_machine_interface_system.pdf" target="_blank" rel="noopener noreferrer">https://static.aminer.org/pdf/PDF/000/329/658/emg_based_human_machine_interface_system.pdf</a></p><ul><li>example of using EMG to control a robot</li><li>really old paper</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comparison">Comparison<a href="#comparison" class="hash-link" aria-label="Direct link to Comparison" title="Direct link to Comparison">​</a></h2><p>AR is the cheapest of the three, as no special hardware is needed most of the time. VR however has huge upside of remote operation, by emerging the user in the distant environment. Additionally VR can be more intuitive because the user can be "in the skin" of the robot. Bio-signal-based solutions are in the early stages but offer huge potential for swift intuitive interaction with robots.</p><table><thead><tr><th></th><th>Example use cases</th><th>Example devices</th><th>ease of use</th><th>unique functions</th><th>cost</th><th>future potential</th></tr></thead><tbody><tr><td>VR</td><td>control robot motion over internet by moving controllers and observing results</td><td>Oculus rift, Meta quest pro, smartphone</td><td>special equipment necessary (headset and controllers), often uncomfortable for long periods of time, either battery (limited work time) or cables (limited motion range)</td><td>teleoperation, see whole environment of the robot from somewhere else; ego perspective and feel of robot (step into skin of robot, more hands on), but strong stable internet connection necessary</td><td>expensive special equipment, getting cheaper when consumer grade equipment can be used</td><td>might become important to remotely help out "almost fully" autonomous systems in difficult situations; need better form factors</td></tr><tr><td>AR</td><td>display important robot information about the robot(range of motion, wear and tear, pre-rendering of action)</td><td>google glasses, tablet, smartphone</td><td>really simple</td><td>no special equipment required</td><td>pretty low, no special equipment</td><td>integration into normal glasses, or contact lenses</td></tr><tr><td>Bio-signal-based</td><td>signal if robot did right or wrong action directly with ones mind, control of prosthesis via muscle signals(EMG)</td><td>implants (Neuralink), EEG, EMG, etc.</td><td>some special equipment needed, sometimes easy to use (wrist bands), sometimes permanent augment (implant)</td><td>if implemented well, can read the humans mind and make robot smooth extension of human</td><td>ranges from cheap(wrist bands) to expensive(implants)</td><td>huge potential to merge with robots and full control of a robot with a humans thoughts</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-cases">Use cases<a href="#use-cases" class="hash-link" aria-label="Direct link to Use cases" title="Direct link to Use cases">​</a></h3><ul><li><p>VR</p><ul><li>teleoperation</li><li>swarm operation</li><li>full birds eye view or different perspective</li></ul></li><li><p>AR</p><ul><li>display important information about the environment and the robot</li></ul></li><li><p>Bio-signal-based</p><ul><li>control of robot</li><li>possibly more complex, and faster controls possible</li></ul></li><li><p>Comparison
VR has the special property that it can transport the user into a completely different environment to control a robot through teleoperation. Additionally one can view the environment from any perspective, for example a birds eye view, as in \ref. This can help to gain an overview over the environment and thus control swarms or other robots.
AR and bio-signal-based technologies have direct visual contact from the user or through the camera of a handheld device, like a tablet \ref, most of the time.
However, AR can enhance the real environment with important information about the workspace and the robot. This can help the user to perform the tasks faster and saver. It is to be noted that technically VR can do the same, by recording the environment with its front camera and displaying the information in the headset, but the user might have a lower field of view compared to AR glasses or a tablet.
Bio-signal-based technologies can be used to control the robot directly with ones mind (EEG) or muscles (EMG), like in \ref. The applications are still limited to simple controls of robot arms or the detection of mistakes with the human mind.
The main difference to AR and VR is the fact that the reactions can be faster as the thinking about the mistake can be detected unconsciously by the system. The main issue is that the reliability is still low and thus not save to use with big and powerful robots.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="devices">Devices<a href="#devices" class="hash-link" aria-label="Direct link to Devices" title="Direct link to Devices">​</a></h3><ul><li><p>VR</p><ul><li>Meta quest 2</li><li>smartphone</li></ul></li><li><p>AR</p><ul><li>google glasses</li><li>tablet</li><li>smartphone</li></ul></li><li><p>Bio-signal-based</p><ul><li>EEG</li><li>EMG</li><li>implants (Neuralink)</li></ul></li><li><p>Comparison
VR devices are mostly headsets to display the environment with controllers to control the robot and the position of the user. For headsets, the Meta Quest 2/Pro or the Valve Index can be used. For the controllers, Razer Hydra hand trackers or the default VR controllers that come with the headsets are available. The user can also use a smartphone as a headset, but the field of view is limited, the performance might not be enough and the resolution is not as good as with a dedicated headset.
For AR, dedicated glasses are still early in the development. However handheld devices like tablets or smartphones can be used as well, as in \ref.
Bio-signal-based devices can be wrist bands, that measure muscle contraction, electrodes on the scalp to measure signals from the brain or various other specialized technology. One main difference is that VR and AR devices are bought on the consumer market, which can help with cost and development, whereas bio-signal-based devices aren't often used in everyday live.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ease-of-use">Ease of use<a href="#ease-of-use" class="hash-link" aria-label="Direct link to Ease of use" title="Direct link to Ease of use">​</a></h3><ul><li><p>VR</p><ul><li>special equipment necessary (headset and controllers), often uncomfortable for long periods of time, either battery (limited work time) or cables (limited motion range)</li><li>intuitive, ego perspective</li></ul></li><li><p>AR</p><ul><li>really simple</li><li>need to control by touchscreen, which is not as intuitive as VR</li></ul></li><li><p>Bio-signal-based</p><ul><li>some special equipment needed, sometimes easy to use (wrist bands), sometimes permanent augment (implant)</li></ul></li><li><p>comparison</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost">Cost<a href="#cost" class="hash-link" aria-label="Direct link to Cost" title="Direct link to Cost">​</a></h3><p>Table:</p><table><thead><tr><th>technology</th><th>device</th><th>cost</th><th>link</th></tr></thead><tbody><tr><td>VR</td><td>Meta Quest 2</td><td>450$</td><td><a href="https://www.meta.com/de/en/quest/products/quest-2/" target="_blank" rel="noopener noreferrer">https://www.meta.com/de/en/quest/products/quest-2/</a></td></tr><tr><td>VR</td><td>Valve Index</td><td>1079$</td><td><a href="https://store.steampowered.com/valveindex" target="_blank" rel="noopener noreferrer">https://store.steampowered.com/valveindex</a></td></tr><tr><td>AR</td><td>I-pad</td><td>449$</td><td><a href="https://www.apple.com/shop/buy-ipad/ipad" target="_blank" rel="noopener noreferrer">https://www.apple.com/shop/buy-ipad/ipad</a></td></tr><tr><td>AR</td><td>Galaxy Tab S8</td><td>200$</td><td><a href="https://www.samsung.com/us/tablets/galaxy-tab-s8/buy/" target="_blank" rel="noopener noreferrer">https://www.samsung.com/us/tablets/galaxy-tab-s8/buy/</a></td></tr><tr><td>AR</td><td>Google Glasses</td><td>999$</td><td><a href="https://www.theverge.com/2019/5/20/18632689/google-glass-enterprise-edition-2-augmented-reality-headset-pricing" target="_blank" rel="noopener noreferrer">https://www.theverge.com/2019/5/20/18632689/google-glass-enterprise-edition-2-augmented-reality-headset-pricing</a></td></tr><tr><td>Bio-signal-based</td><td>EEG electrode hat</td><td>1500$</td><td><a href="https://shop.openbci.com/collections/frontpage" target="_blank" rel="noopener noreferrer">https://shop.openbci.com/collections/frontpage</a></td></tr></tbody></table><ul><li>comparison
To compare the cost of the different technologies, The prices of the different devices were looked up and summarized in \ref. Note that this is only a fraction of possible devices.
The low end Meta Quest 2 in the same price range as the high end I-Pad. But when comparing the more powerful Valve Index, to a more budget tablet, like the Galaxy Tab S8, VR devices are considerably more expensive than a basic AR device. Additionally for most VR headsets, an additional high end PC is necessary to process the visuals.
Another alternative for AR are the Google Glasses, which come at a higher price, similar to the VR headsets.
Bio-signal-based devices, specifically EEG, are starting at the price of a VR headset. They might however get cheaper if those devices get produced in higher numbers. The prices can get way higher as well, if implants through operations are used.
So in general, AR is the cheapest option, as one can simply use a smartphone or a tablet. VR requires some special technology in form of a headset and probably a high end PC. Finally, the bio-signal-based devices come out as most expensive, as they are still early in development.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="problems">Problems<a href="#problems" class="hash-link" aria-label="Direct link to Problems" title="Direct link to Problems">​</a></h3><p>The main ways VR and AR can improve from today are general hardware improvements like better batteries, </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="future-potential">Future potential<a href="#future-potential" class="hash-link" aria-label="Direct link to Future potential" title="Direct link to Future potential">​</a></h3><ul><li><p>VR</p><ul><li>might become important to remotely help out "almost fully" autonomous systems in difficult situations</li><li>need better form factors and better hardware:<ul><li>batteries</li><li>more comfortable</li></ul></li></ul></li><li><p>AR</p><ul><li>integration into normal glasses, or contact lenses</li><li>more powerful hardware, or remote processing</li></ul></li><li><p>Bio-signal-based</p><ul><li>huge potential to merge with robots and full control of a robot with a humans thoughts</li><li>more consumer based hardware</li><li>improved reliability</li></ul></li><li><p>Comparison:
VR might be used at some point to have the human help out almost fully autonomous systems by stepping in the perspective of the robot. Or it can be used to fully control robots remotely and remove the need for humans to work in dangerous environments.
AR could have a huge jump in usability if it were to be integrated into everyday glasses or even contact lenses. This could enable people without training to use them. If robots are more common in everyday life this might increase the trust in the robots by displaying certain information about the robots future actions in the environment.
Bio-signal-based technologies could be used to completely and reliably control robots with human thoughts, which would be a huge step in the field of human-robot interaction. If this technology is achieved, most other control devices might be obsolete.
So the biggest potential certainly lies within EEG technologies, as they can enable a direct link between human and robot. However the other two technologies might also play a crucial role in some more niche cases.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><ul><li><p>Summarize the key points and findings of the paper:
In summary, it is difficult to compare the three technologies, because they each have their different use cases, as seen in \ref. Additionally, they are never tested against each other, with regard to user feedback.
When comparing the use cases, VR shows a clear advantage in teleoperation, AR in merging digital information into the real world environment and bio-signal-based technology can use quick reactions directly from the human brain to mitigate mistakes.</p></li><li><p>Highlight the main contributions of the paper and its impact on the field of HRI interfaces:
This paper compares some examples of the three technologies and their use cases. It also extrapolates those comparisons to the whole categories. Hopefully it can give some ideas on the future research directions of the field. Additionally, this is an encouragement to further investigate how to better compare the three technologies to then be able to better predict what technology is worth more efforts. To conclude this report, some recommendations for future research are the following.</p></li><li><p>Discuss future directions for research in HRI interfaces, including VR, AR, and bio-signal-based:</p></li></ul><p>The final achievement would be to have a direct link between human and robot in both directions. Until then, all three technologies will need to be improved gradually.
For VR, the ability to wear the headset for a long time and training programs should be the focus.
AR might be more useful, if the technology gets integrated better into glasses to not need an extra tablet while working with a robot in the workspace.
Bio-signal-based technologies first need to improve their reliability before they can be used in real-world applications. A next step would be to improve the designs behind the devices, so they can be used more for consumer products and accelerate the development.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="todo">todo<a href="#todo" class="hash-link" aria-label="Direct link to todo" title="Direct link to todo">​</a></h2><ul><li>add picture maybe</li><li>add VR/AR review</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Logic]]></title>
            <link>https://mokronos.github.io/blog/logic</link>
            <guid>https://mokronos.github.io/blog/logic</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Some wiki stuff:]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="some-wiki-stuff">Some wiki stuff:<a href="#some-wiki-stuff" class="hash-link" aria-label="Direct link to Some wiki stuff:" title="Direct link to Some wiki stuff:">​</a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Argument_map" target="_blank" rel="noopener noreferrer">Argument map</a></li><li><a href="https://en.wikipedia.org/wiki/Logical_form" target="_blank" rel="noopener noreferrer">Logical form</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="idea">Idea<a href="#idea" class="hash-link" aria-label="Direct link to Idea" title="Direct link to Idea">​</a></h2><p>It would be cool to have a somewhat standarised form of arguments or moral systems. This could be in form of an Argument map in a huge tree and implemented on a website or in a program.</p><p>So one could create ones own tree of axioms, premisses and conclusions. Those could be shared and argued about. The program could help identifiy contentions between two peoples moral systems so one can instantly focus on the disagreements.</p><p>The main issue is the uglieness of human input. Even with a some standard blocks like axioms and other logical forms humans still input their claims differently. So one would need some machine learning to interpret and compare arguments. With the advancements of language models like <a href="https://en.wikipedia.org/wiki/GPT-3" target="_blank" rel="noopener noreferrer">GTP-3</a> one may be able to achieve some decent results.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Machine Learning]]></title>
            <link>https://mokronos.github.io/blog/machine_learning</link>
            <guid>https://mokronos.github.io/blog/machine_learning</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Preparation]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preparation">Preparation<a href="#preparation" class="hash-link" aria-label="Direct link to Preparation" title="Direct link to Preparation">​</a></h2><p>Going Through <a href="https://cs50.harvard.edu/college/2022/spring/notes/0/" target="_blank" rel="noopener noreferrer">CS50</a> for refresh of some basics (<a href="/blog/cs50">Notes</a>).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sources">Sources<a href="#sources" class="hash-link" aria-label="Direct link to Sources" title="Direct link to Sources">​</a></h2><p><a href="https://machinelearningmastery.com/start-here/" target="_blank" rel="noopener noreferrer">Roadmap/Plan</a><br>
<a href="http://karpathy.github.io/2022/03/14/lecun1989/" target="_blank" rel="noopener noreferrer">Motivation/Karpathy is a cool dude</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="problem-description">Problem description<a href="#problem-description" class="hash-link" aria-label="Direct link to Problem description" title="Direct link to Problem description">​</a></h2><blockquote><p>Find a model or procedure that makes best use of historical data comprised of inputs and outputs in order to skillfully predict outputs given new and unseen inputs in the future. <a href="https://machinelearningmastery.com/think-machine-learning/#:~:text=Find%20a%20model%20or%20procedure%20that%20makes%20best%20use%20of%20historical%20data%20comprised%20of%20inputs%20and%20outputs%20in%20order%20to%20skillfully%20predict%20outputs%20given%20new%20and%20unseen%20inputs%20in%20the%20future." target="_blank" rel="noopener noreferrer">[1]</a></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="problem-solution">Problem solution<a href="#problem-solution" class="hash-link" aria-label="Direct link to Problem solution" title="Direct link to Problem solution">​</a></h2><blockquote><p>A model or procedure that automatically creates the most likely approximation of the unknown underlying relationship between inputs and associated outputs in historical data. <a href="https://machinelearningmastery.com/think-machine-learning/#:~:text=as%20the%20following%3A-,A%20model%20or%20procedure%20that%20automatically%20creates%20the%20most%20likely%20approximation%20of%20the%20unknown%20underlying%20relationship%20between%20inputs%20and%20associated%20outputs%20in%20historical%20data.,-Again%2C%20this%20is" target="_blank" rel="noopener noreferrer">[1]</a></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-get-there">How to get there<a href="#how-to-get-there" class="hash-link" aria-label="Direct link to How to get there" title="Direct link to How to get there">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-the-problem">Define the problem<a href="#define-the-problem" class="hash-link" aria-label="Direct link to Define the problem" title="Direct link to Define the problem">​</a></h3><ul><li>Describe problem informally and formally and list assumptions and similar problems</li><li>List motivations for solving the problem, the benefits a solution provides and how the solution will be used.</li><li>Describe how the problem could be solved manually.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="prepare-data">Prepare Data<a href="#prepare-data" class="hash-link" aria-label="Direct link to Prepare Data" title="Direct link to Prepare Data">​</a></h3><ul><li>Consider what data is available, what data is missing and what data can be removed.</li><li>Organize your selected data by formatting, cleaning and sampling from it.</li><li>Transform preprocessed data into features ready for machine learning.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="spot-check-algorithms">Spot check algorithms<a href="#spot-check-algorithms" class="hash-link" aria-label="Direct link to Spot check algorithms" title="Direct link to Spot check algorithms">​</a></h3><ul><li>create small experiment with different transformations of the dataset and different standard algorithms</li><li>run every pair a bunch of times and compare mean and variance</li><li>helps flushing out the problem structure and getting the algorithms on which to focus in the next steps</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="improving-results">Improving Results<a href="#improving-results" class="hash-link" aria-label="Direct link to Improving Results" title="Direct link to Improving Results">​</a></h3><ul><li>Search through parameter space to find best performing models</li><li>Ensemble: combine results of multiple models</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="present-results">Present Results<a href="#present-results" class="hash-link" aria-label="Direct link to Present Results" title="Direct link to Present Results">​</a></h3><ul><li>Define the context of the problem and the motivation</li><li>Describe Problem as a question that got answered</li><li>Concisely describe the solution as an answer to the question</li><li>Specify limitations of the model, what questions it can't answer and with what probability it can answer questions</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Neural network]]></title>
            <link>https://mokronos.github.io/blog/neural_network</link>
            <guid>https://mokronos.github.io/blog/neural_network</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Intuitive understanding]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intuitive-understanding">Intuitive understanding<a href="#intuitive-understanding" class="hash-link" aria-label="Direct link to Intuitive understanding" title="Direct link to Intuitive understanding">​</a></h2><p>A neural network is pretty much just a function that maps a bunch of inputs to a bunch of outputs. First that function does bad at mapping. By showing a lot of input/output pairs the parameters in the function get adjusted to improve the mapping.</p><p>So there are three big parts of a neural network. The architecture of the network, the optimization of the parameters and the amount and quality of the data.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="architecture">Architecture<a href="#architecture" class="hash-link" aria-label="Direct link to Architecture" title="Direct link to Architecture">​</a></h2><ul><li>How many layers?</li><li>What type of layers?</li><li>What activation functions?</li><li>Input and output dimensions?</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="optimization">Optimization<a href="#optimization" class="hash-link" aria-label="Direct link to Optimization" title="Direct link to Optimization">​</a></h2><ul><li>What does the loss function look like?</li><li>Gradient descent?</li><li>What optimizer?</li><li>When and how fast to change the parameters?</li><li>When to stop training?</li><li>Is there overfitting?</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="data">Data<a href="#data" class="hash-link" aria-label="Direct link to Data" title="Direct link to Data">​</a></h2><ul><li>How much data is there?</li><li>Is Data argumentation necessary and/or useful?</li><li>Can there be too much data?</li><li>Is there bias in data?</li></ul><h1>Practical Stuff</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="perceptron">Perceptron<a href="#perceptron" class="hash-link" aria-label="Direct link to Perceptron" title="Direct link to Perceptron">​</a></h2><p>The Perceptron is the simplest neural network possible.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="implement-small-deep-learning-library-from-scratch-with-numpy">Implement small deep learning library from scratch (with numpy)<a href="#implement-small-deep-learning-library-from-scratch-with-numpy" class="hash-link" aria-label="Direct link to Implement small deep learning library from scratch (with numpy)" title="Direct link to Implement small deep learning library from scratch (with numpy)">​</a></h2><p>At some point!! To help with a deeper understanding of backpropagation and the inner workings in general.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[notes]]></title>
            <link>https://mokronos.github.io/blog/notes</link>
            <guid>https://mokronos.github.io/blog/notes</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Destiny notes]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="destiny-notes">Destiny notes<a href="#destiny-notes" class="hash-link" aria-label="Direct link to Destiny notes" title="Direct link to Destiny notes">​</a></h2><ul><li>Website to organize Destiny's arguments in a nice format with logic structure</li><li>link to segments/proofs</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="overarching-points">overarching points<a href="#overarching-points" class="hash-link" aria-label="Direct link to overarching points" title="Direct link to overarching points">​</a></h3><ul><li>All the points are supposed to be examples of the application of a system</li><li>This system is used to generate good outcomes in your live</li><li>So don't try to copy the outcome of the points, as they are based on Destiny's subjective values and environment</li><li>Instead try to understand the system and apply it to your own life</li></ul><h3></h3><ul><li>Act as a sounding board when talking with emotional friend</li><li>if you have the choice between burning someone to the ground or leaving it neutral, leave it neutral</li><li>be really careful when comparing people, especially when both are friends<ul><li>e.g. Comparing body parts</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ai-vs-human">AI vs human<a href="#ai-vs-human" class="hash-link" aria-label="Direct link to AI vs human" title="Direct link to AI vs human">​</a></h2><ul><li>Website with question</li><li>need to select real answer, from real and AI generated answer</li><li>AI generated answer is instructed to sound like human (gpt3 api)</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PyTorch]]></title>
            <link>https://mokronos.github.io/blog/pytorch</link>
            <guid>https://mokronos.github.io/blog/pytorch</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Data Loading]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="data-loading">Data Loading<a href="#data-loading" class="hash-link" aria-label="Direct link to Data Loading" title="Direct link to Data Loading">​</a></h2><p>For a custom dataset one needs to implement the Dataset class even if its the most basic dataset.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="derivatives">Derivatives<a href="#derivatives" class="hash-link" aria-label="Direct link to Derivatives" title="Direct link to Derivatives">​</a></h2><p><a href="https://machinelearningmastery.com/calculating-derivatives-in-pytorch/" target="_blank" rel="noopener noreferrer"></a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Search]]></title>
            <link>https://mokronos.github.io/blog/search</link>
            <guid>https://mokronos.github.io/blog/search</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Implementation of different search algorithms in python.]]></description>
            <content:encoded><![CDATA[<p>Implementation of different search algorithms in python.</p><p>Sample Array:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">9</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Goal:</p><p>Search 1 specific number. If not in array, return <code>-1</code>. If in array return the index of the number.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="linear-search">Linear Search<a href="#linear-search" class="hash-link" aria-label="Direct link to Linear Search" title="Direct link to Linear Search">​</a></h2><p>Just look through every entry from left to right and check if the entry is equal to the target.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">linear</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> entry </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">enumerate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> entry </span><span class="token operator">==</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> idx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Complexity:<br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.02778em">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span><br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="binary-search">Binary Search<a href="#binary-search" class="hash-link" aria-label="Direct link to Binary Search" title="Direct link to Binary Search">​</a></h2><p>Only works with a sorted list!<br>
<!-- -->Look at the middle of the list first and check if that entry is the target. If it isn't the target, compare that number with the target. If the target is higher, repeat from the first step with the right half of the list, otherwise with the left half.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">binary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> idx </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    length </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> length </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    middle </span><span class="token operator">=</span><span class="token plain"> length</span><span class="token operator">//</span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> idx </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        idx </span><span class="token operator">=</span><span class="token plain"> middle</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">middle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">==</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> idx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">middle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> binary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">middle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> idx</span><span class="token operator">-</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">middle</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> binary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">middle</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> idx</span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">middle</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Complexity:<br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.02778em">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span><br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sorting">Sorting<a href="#sorting" class="hash-link" aria-label="Direct link to Sorting" title="Direct link to Sorting">​</a></h2><p><strong>Now the question is:</strong><br>
<!-- -->Is it better to just do linear search or sort the array and then do binary search. For one search linear search would make more sense. However in practice the same arrays often get searched multiple times. So it is better to sort them once and then do binary search multiple times on the sorted array to save time.<br>
<a href="/blog/sort">Some Sort Algorithms.</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Sort]]></title>
            <link>https://mokronos.github.io/blog/sort</link>
            <guid>https://mokronos.github.io/blog/sort</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Implementation of different search algorithms in python.]]></description>
            <content:encoded><![CDATA[<p>Implementation of different search algorithms in python.</p><p>Sample Array:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">9</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Goal:</p><p>Sort array from lowest to highest entry and return it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="selection-sort">Selection sort<a href="#selection-sort" class="hash-link" aria-label="Direct link to Selection sort" title="Direct link to Selection sort">​</a></h2><p>Go through whole list and find the lowest number. Swap that number with the first number in the list. Start with one position to the right and repeat.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">selection</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        min_idx </span><span class="token operator">=</span><span class="token plain"> i</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> j </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">min_idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                min_idx </span><span class="token operator">=</span><span class="token plain"> j</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">min_idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">min_idx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Complexity:<br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.02778em">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span><br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bubble-sort">Bubble sort<a href="#bubble-sort" class="hash-link" aria-label="Direct link to Bubble sort" title="Direct link to Bubble sort">​</a></h2><p>Go through list and check if number is higher than the following number. If yes, swap the two numbers. If no, go to the next number. Repeat from the first step, but end one further position to the left.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bubble</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> j </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token plain">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Complexity:<br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.02778em">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span><br>
<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="merge-sort">Merge sort<a href="#merge-sort" class="hash-link" aria-label="Direct link to Merge sort" title="Direct link to Merge sort">​</a></h2><p>Divide list in middle and recursively repeat for left and right. When a list is only 1 number return it. When two of these lists got returned, they are sorted. Then they are combined again, by looking at the first entry in each list and appending the lower number to the result. Repeat until right and left are "empty".</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">merge</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    middle </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> right </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">middle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">middle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    left </span><span class="token operator">=</span><span class="token plain"> merge</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    right </span><span class="token operator">=</span><span class="token plain"> merge</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    result</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    i </span><span class="token operator">=</span><span class="token plain"> j </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> j </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            result</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            i</span><span class="token operator">+=</span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            result</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            j</span><span class="token operator">+=</span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        result </span><span class="token operator">+=</span><span class="token plain"> left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> j </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        result </span><span class="token operator">+=</span><span class="token plain"> right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> result</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Complexity:<br>
<!-- -->\<!-- -->(O(n \log n)<!-- -->\<!-- -->)<br>
<!-- -->\<!-- -->(\Omega(n \log n)<!-- -->\<!-- -->)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualization">Visualization<a href="#visualization" class="hash-link" aria-label="Direct link to Visualization" title="Direct link to Visualization">​</a></h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener noreferrer">Here.</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidy data]]></title>
            <link>https://mokronos.github.io/blog/tidy_data</link>
            <guid>https://mokronos.github.io/blog/tidy_data</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Mostly a summary of the paper tidy data.]]></description>
            <content:encoded><![CDATA[<p>Mostly a summary of the paper <a href="https://vita.had.co.nz/papers/tidy-data.pdf" target="_blank" rel="noopener noreferrer">tidy data</a>.</p><p>Example of badly formatted data:</p><table><thead><tr><th></th><th>treatmenta</th><th>treatmentb</th></tr></thead><tbody><tr><td>John Smith</td><td>-</td><td>2</td></tr><tr><td>Jane Doe</td><td>16</td><td>11</td></tr><tr><td>Mary Johnson</td><td>3</td><td>1</td></tr></tbody></table><p>Better formatted version of that data:</p><table><thead><tr><th>name</th><th>trt</th><th>result</th></tr></thead><tbody><tr><td>Jane Doe</td><td>a</td><td>16</td></tr><tr><td>Jane Doe</td><td>b</td><td>11</td></tr><tr><td>John Smith</td><td>a</td><td>-</td></tr><tr><td>John Smith</td><td>b</td><td>2</td></tr><tr><td>Mary Johnson</td><td>a</td><td>3</td></tr><tr><td>Mary Johnson</td><td>b</td><td>1</td></tr></tbody></table><p>Important guidelines:</p><ul><li>Rows: observations</li><li>Columns: variables</li><li>Values: variable values at specific observations</li></ul><p>Order:</p><ul><li>variables: fixed (descriptions of the experiment) first, then measured variables, always the ones related to each other next to each other</li><li>observations: order by first variable, then break ties with the following variables</li></ul><p>This leads to a standard, which is important as programs knows how their input is structured. So they can take the data, transform it and return tidy data again.</p><h1>From messy to tidy</h1><p>To get a dataset from messy to tidy one can employ three operations:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="melting">Melting<a href="#melting" class="hash-link" aria-label="Direct link to Melting" title="Direct link to Melting">​</a></h2><p>Turns multiple columns that are variables into a column with the names of the specific columns and a column with the value.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="messy">Messy:<a href="#messy" class="hash-link" aria-label="Direct link to Messy:" title="Direct link to Messy:">​</a></h3><table><thead><tr><th>row</th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>4</td><td>7</td></tr><tr><td>B</td><td>2</td><td>5</td><td>7</td></tr><tr><td>C</td><td>3</td><td>6</td><td>9</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="molten">Molten:<a href="#molten" class="hash-link" aria-label="Direct link to Molten:" title="Direct link to Molten:">​</a></h3><table><thead><tr><th>row</th><th>column</th><th>value</th></tr></thead><tbody><tr><td>A</td><td>a</td><td>1</td></tr><tr><td>A</td><td>b</td><td>4</td></tr><tr><td>A</td><td>c</td><td>7</td></tr><tr><td>B</td><td>a</td><td>2</td></tr><tr><td>B</td><td>b</td><td>5</td></tr><tr><td>B</td><td>c</td><td>8</td></tr><tr><td>C</td><td>a</td><td>3</td></tr><tr><td>C</td><td>b</td><td>6</td></tr><tr><td>C</td><td>c</td><td>9</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="string-splitting">String splitting<a href="#string-splitting" class="hash-link" aria-label="Direct link to String splitting" title="Direct link to String splitting">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="casting">Casting<a href="#casting" class="hash-link" aria-label="Direct link to Casting" title="Direct link to Casting">​</a></h2>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Knowing the unknown]]></title>
            <link>https://mokronos.github.io/blog/unknown</link>
            <guid>https://mokronos.github.io/blog/unknown</guid>
            <pubDate>Mon, 30 Oct 2023 13:16:27 GMT</pubDate>
            <description><![CDATA[Why are people often times so bad when they don't have all information. And cant deal with probabilities.]]></description>
            <content:encoded><![CDATA[<p>Why are people often times so bad when they don't have all information. And cant deal with probabilities.</p>]]></content:encoded>
        </item>
    </channel>
</rss>